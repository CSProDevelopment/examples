PROC GLOBAL


// some definitional constants
numeric MinAgeHead = 15;
numeric MinGenerationalDifference = 12;


// these variables are used to create dynamic question text for the RELATIONSHIP question
string headText;
numeric headKnown;


function string ConstructPersonName(numeric rowNumber)
	ConstructPersonName = maketext("%s %s", strip(FIRST_NAME(rowNumber)), strip(LAST_NAME(rowNumber)));
end;

function string PersonName()
	// this function is called in question text to get the full name of the current person
	PersonName = ConstructPersonName(curocc());
end;


PROC SIMPLECAPI_FF


PROC SIMPLECAPI_LEVEL

	// before finalizing the case, set a case label for a more descriptive label in the case listing
	numeric ptrHead = seek(RELATIONSHIP = 1);
	setcaselabel(SIMPLECAPI_DICT, maketext("Household #%d | Head: %s", HOUSEHOLD_ID, ConstructPersonName(ptrHead)));


PROC NAME_BLOCK

	// a blank name indicates the end of the household
	if FIRST_NAME = "" and LAST_NAME = "" then

		if curocc() = 1 then
			errmsg("The household must consist of at least one person.");
			reenter;

		elseif count(RELATIONSHIP = 1) = 0 then
			errmsg("No head of household has been entered. You must add the head.");
			reenter;

		endif;

		// confirm that this is really the end of household and not an inadvertent blank
		numeric numHouseholdMembers = curocc() - 1;

		list string endConfirmationOptions;

		do numeric ctr = 1 while ctr <= numHouseholdMembers
			endConfirmationOptions.add("Edit " + ConstructPersonName(ctr));
		enddo;

		endConfirmationOptions.add("Add Another Member");
		endConfirmationOptions.add("End Interview");

		numeric selection = endConfirmationOptions.show("Are you finished entering household members?");

		if selection in 1:numHouseholdMembers then // the interviewer selected a person
			reenter NAME_BLOCK(selection);

		elseif selection = endConfirmationOptions.length() then // finished with the household roster
			endgroup;

		else
			reenter;

		endif;

	elseif FIRST_NAME = "" or LAST_NAME = "" then
		errmsg("You must enter both a first and last name.");
		reenter;

	endif;

	// set the occurrence label to the person's name
 	setocclabel(PERSON_REC000, PersonName());


PROC RELATIONSHIP

onfocus

	// if the head has been specified, we will display that person's name in the CAPI text
	headKnown = 0;

	do numeric ctr = 1 while ctr <= totocc(RELATIONSHIP)

		// when a field is located in the program at a point further than the the current field,
		// we must use the visualvalue function to retrieve its value
		if ctr <> curocc() and visualvalue(RELATIONSHIP(ctr)) = 1 then
			headKnown = 1;
			headText = ConstructPersonName(ctr);
		endif;

	enddo;


	// customize the value set based on whether the person is a male or female
	if SEX = 1 then	setvalueset(RELATIONSHIP, RELATIONSHIP_MALE_VS);
	else			setvalueset(RELATIONSHIP, RELATIONSHIP_FEMALE_VS);
	endif;

postproc

	numeric ptrHead = seek(RELATIONSHIP = 1);
	numeric ptrSpouse = seek(RELATIONSHIP = 2);

	numeric cntFather,
			cntMother,
			cntGrandfather,
			cntGrandmother;

	// do some relationship checks on the already entered data
	do numeric ctr = 1 while ctr <= curocc()

		// ensure one head, of a minimum age
		if RELATIONSHIP(ctr) = 1 then

			if ptrHead < ctr then
				errmsg("%s was already marked as the head of household. You cannot have two heads.", ConstructPersonName(ptrHead));
				reenter;

			elseif AGE(ctr) < MinAgeHead then
				errmsg("%s cannot be a head of household because a head must be at least %d-years-old.", ConstructPersonName(ctr), MinAgeHead);
				reenter;

			endif;

		endif;


		// ensure only one spouse
		if RELATIONSHIP(ctr) = 2 then

			if ptrSpouse < ctr then
				errmsg("%s was already marked as the spouse. You cannot have two spouses.", ConstructPersonName(ptrSpouse));
				reenter;

			endif;

		endif;


		// - ensure a maximum of one father, one mother, two grandfathers, and two grandmothers
		if RELATIONSHIP(ctr) = 5 then

			if SEX(ctr) = 1 and inc(cntFather) > 1 then
				errmsg(10001, 1, "father");
				reenter;

			elseif SEX(ctr) = 2 and inc(cntMother) > 1 then
				errmsg(10001, 1, "mother");
				reenter;

			endif;

		elseif RELATIONSHIP(ctr) = 6 then

			if SEX(ctr) = 1 and inc(cntGrandfather) > 2 then
				errmsg(10001, 2, "grandfathers");
				reenter;

			elseif SEX(ctr) = 2 and inc(cntGrandmother) > 2 then
				errmsg(10001, 2, "grandmothers");
				reenter;

			endif;

		endif;


		// - ensure proper age differences for grandchildren, children, parents, and grandparents
		string ageErrorMessage;

		if ptrHead > 0 then

			if RELATIONSHIP(ctr) = 3 then // child
				if ( AGE(ptrHead) - AGE(ctr) ) < MinGenerationalDifference then
					ageErrorMessage = maketext(10002, "child", MinGenerationalDifference, "younger", AGE(ptrHead));
				endif;

			elseif RELATIONSHIP(ctr) = 5 then // parent
				if ( AGE(ctr) - AGE(ptrHead) ) < MinGenerationalDifference then
					ageErrorMessage = maketext(10002, "parent", MinGenerationalDifference, "older", AGE(ptrHead));
				endif;

			elseif RELATIONSHIP(ctr) = 6 then // grandparent
				if ( AGE(ctr) - AGE(ptrHead) ) < 2 * MinGenerationalDifference then
					ageErrorMessage = maketext(10002, "grandparent", 2 * MinGenerationalDifference, "older",AGE(ptrHead));
				endif;

			elseif RELATIONSHIP(ctr) = 7 then // grandchild
				if ( AGE(ptrHead) - AGE(ctr) ) < 2 * MinGenerationalDifference then
					ageErrorMessage = maketext(10002, "grandchild", 2 * MinGenerationalDifference, "younger", AGE(ptrHead));
				endif;

			endif;

			if length(ageErrorMessage) > 0 then
				errmsg("%s", ageErrorMessage) select("Edit Age", AGE, "Edit Relationship", RELATIONSHIP);
			endif;

		endif;

	enddo;


PROC LITERATE

preproc

	// do not ask literacy questions of people under age 5
	if AGE < 5 or AGE = missing then
		skip to next;
	endif;

postproc

	// only ask literacy questions of people who are literate
	if LITERATE <> 1 then
		skip to next;
	endif;


PROC LANGUAGES_BLOCK

	if LANGUAGES_SPOKEN = "" and LANGUAGES_SPOKEN_OTHER = "" then
		errmsg("You must select at least one check box or enter an other option.");
		reenter;
	endif;


PROC MAIN_LANGUAGE

onfocus

	// set up the value set using languages that the person speaks; if only one, preselect the language
	valueset string mainLanguageValueSet;

	do numeric ctr = 1 while ctr <= MAIN_LANGUAGE_VS1.length()

		if ischecked(MAIN_LANGUAGE_VS1.codes(ctr), LANGUAGES_SPOKEN) then
			mainLanguageValueSet.add(MAIN_LANGUAGE_VS1.labels(ctr), MAIN_LANGUAGE_VS1.codes(ctr));
		endif;

	enddo;

	if LANGUAGES_SPOKEN_OTHER <> "" then // add the other language
		mainLanguageValueSet.add(LANGUAGES_SPOKEN_OTHER, "99");
	endif;

	setvalueset(MAIN_LANGUAGE, mainLanguageValueSet);

	// no need to ask the question if they only listed one language for languages spoken
	if mainLanguageValueSet.length() = 1 then
		MAIN_LANGUAGE = mainLanguageValueSet.codes(1);
		setproperty(MAIN_LANGUAGE, "Protected", "Yes");

	else
		setproperty(MAIN_LANGUAGE, "Protected", "No");

	endif;

