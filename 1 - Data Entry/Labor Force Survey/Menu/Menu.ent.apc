PROC GLOBAL

// For fill in question text
string currentFinalResultCode;

function launchHouseholdDataEntry()

	pff household_pff;
	household_pff.load("../Questionnaire/PopstanLFS.pff");

	household_pff.setproperty("Key", CHOOSE_HOUSEHOLD);

	household_pff.setproperty("TO_PROVINCE", maketext("%d", SAMPROV));
	household_pff.setproperty("TO_DISTRICT", maketext("%d", SAMDIST));
	household_pff.setproperty("TO_GHDWNO", maketext("%d", SAMDWNO));
	household_pff.setproperty("TO_GHHHNO", maketext("%d", SAMHHNO));
	household_pff.setproperty("TO_GHAREA", maketext("%d", SAMAREA));
	household_pff.setproperty("TO_GHHRPL", maketext("%d", SAMRPL));
	household_pff.setproperty("TO_GHINTID", maketext("%d", LOGIN));

	household_pff.exec();

end;

function showCompletionReport(staffCode)

	numeric totalAssigned = 0;
	numeric completed = 0;
	numeric partial = 0;
	numeric notInterviewed = 0;
	numeric notVisited = 0;

	// Loop through the sample file and increment
	// variables based on interview result
	forcase SAMPLE_DICT where staffCode = SAMINT or staffCode = SAMSUP do

		// Check status of case in status file
		if not loadcase(STATUS_DICT, SAMPROV, SAMDIST, SAMDWNO, SAMHHNO) then
			// Not in status file yet so treat as not started
			STATFIR = 0;
		endif;

		inc(totalAssigned);
		if STATFIR = 0 then
			inc(notVisited);
		elseif STATFIR = 1 then
			inc(completed);
		elseif STATFIR = 2 then
			inc(partial);
		else
			inc(notInterviewed);
		endif;
	endfor;

	// Write report to file
	string tempDirectory = pathconcat(Application, "../temp/");
	dircreate(tempDirectory); // make sure directory exists

	file reportFile;
	setfile(reportFile, pathconcat(tempDirectory, "completionreport.txt"), create);

	reportFile.write("Completion Status for %s", STAFF_NAME);
	reportFile.write("-----------------------------");
	reportFile.write("Total assigned households: %d", totalAssigned);
	reportFile.write("Completed households: %d", completed);
	reportFile.write("Partly completed: %d", partial);
	reportFile.write("Not interviewed: %d", notInterviewed);
	reportFile.write("Not visited: %d", notVisited);

	close(reportFile);

	view(filename(reportFile));

end;

function showPopulationReport(staffCode)

	numeric male = 0;
	numeric female = 0;

	// Loop through the sample file and increment
	// to find assigned households
	forcase SAMPLE_DICT where staffCode = SAMINT or staffCode = SAMSUP do
		// Load household from questionnaire data file and
		// update totals.
		string hhid = key(SAMPLE_DICT);
		if loadcase(POPSTANLFS_DICT, hhid) then
			male = male + count(POPSTANLFS_DICT.DEM_REC where DEMSEX = 1);
			female = female + count(POPSTANLFS_DICT.DEM_REC where DEMSEX = 2);
		endif;
	endfor;

	// Write report to file
	string tempDirectory = pathconcat(Application, "../temp/");
	dircreate(tempDirectory); // make sure directory exists

	file reportFile;
	setfile(reportFile, pathconcat(tempDirectory, "populationreport.txt"), create);

	reportFile.write("Total Population for %s", STAFF_NAME);
	reportFile.write("-----------------------------");
	reportFile.write("Male: %d", male);
	reportFile.write("Female: %d", female);
	reportFile.write("Total: %d", male + female);

	close(reportFile);

	view(filename(reportFile));

end;

function string GetStatusIcon(status)
	if status = 0 then
		GetStatusIcon = "";
	elseif status = 1 then
		// Complete
		GetStatusIcon = " ✓";
	elseif status = 2 then
		// Partial
		GetStatusIcon = " ⌛";
	else
		GetStatusIcon = " ✘"
	endif;
end;


PROC MENU_FF


PROC LOGIN
preproc

// Check to see if there is saved login
if loadsetting("login") <> "" then
	LOGIN = tonumber(loadsetting("login"));
	noinput;
endif;

postproc
if loadcase(STAFF_DICT, LOGIN) then

	// Save login code to settings so we can load it when menu restarts
	savesetting("login", maketext("%d", LOGIN));

	if STAFF_ROLE = 1 then
		// Interviewer
		skip to INTERVIEWER_MENU;
	else
		// Supervisor
		skip to SUPERVISOR_MENU;
	endif;
else
	errmsg("Invalid login. Try again.");
	reenter;
endif;


PROC INTERVIEWER_MENU

if INTERVIEWER_MENU = 1 then
	skip to CHOOSE_HOUSEHOLD;

elseif INTERVIEWER_MENU = 2 then
	// Sync with supervisor
	if syncconnect(Bluetooth) = 1 then

		// Upload changes in questionnaire data file to server
		syncdata(PUT, POPSTANLFS_DICT);

		// Get changes to sample and staff from supervisor
		syncdata(GET, SAMPLE_DICT);
		syncdata(GET, STAFF_DICT);

		// Upload changes to household status
		syncdata(PUT, STATUS_DICT);

		syncdisconnect();

		errmsg("Sync Complete!");

	endif;

else
	// Logout
	savesetting("login", "");
	stop(1);
endif;

// Show menu again
INTERVIEWER_MENU = notappl;
reenter;


PROC SUPERVISOR_MENU

if SUPERVISOR_MENU = 1 then
	// Reports
	skip to SUPERVISOR_REPORTS;

elseif SUPERVISOR_MENU = 2 then
	// Sync HQ
	if syncconnect(Dropbox) = 1 then

		// Upload changes in questionnaire data file to server
		syncdata(PUT, POPSTANLFS_DICT);

		// Get changes to sample and staff from server
		syncdata(GET, SAMPLE_DICT);
		syncdata(GET, STAFF_DICT);

		// Upload changes to household status
		syncdata(PUT, STATUS_DICT);

		syncdisconnect();

		errmsg("Sync Complete!");

	endif;

elseif SUPERVISOR_MENU = 3 then
	// Sync interviewer
	syncserver(Bluetooth);

elseif SUPERVISOR_MENU = 4 then
	// Review questionnaires

else
	// Logout
	savesetting("login", "");
	stop(1);
endif;

// Back to menu
SUPERVISOR_MENU = notappl;
reenter;


PROC CHOOSE_HOUSEHOLD

onfocus
// Make value set from assigned households in sample
valueset string household_vs;
forcase SAMPLE_DICT where SAMINT = LOGIN do
	// Check status of case in status file
	if not loadcase(STATUS_DICT, SAMPROV, SAMDIST, SAMDWNO, SAMHHNO) then
		// Not in status file yet so treat as not started
		STATFIR = 0;
	endif;

	household_vs.add(maketext("%s: %s %s", strip(SAMHNA), strip(SAMHA), GetStatusIcon(STATFIR)), key(SAMPLE_DICT));
endfor;

if household_vs.length() = 0 then
	// No assigned households
	errmsg("No households currently assigned");
	reenter INTERVIEWER_MENU;
endif;

setvalueset(CHOOSE_HOUSEHOLD, household_vs);

postproc
skip to HOUSEHOLD_ACTION;


PROC HOUSEHOLD_ACTION
onfocus

// Load selected case from sample file
// so that variables can be used in question text
loadcase(SAMPLE_DICT, CHOOSE_HOUSEHOLD);

postproc

if HOUSEHOLD_ACTION = 1 then
	// Open questionnaire
	launchHouseholdDataEntry();
elseif HOUSEHOLD_ACTION = 2 then
	skip to HOUSEHOLD_FINAL_RESULT;
elseif HOUSEHOLD_ACTION = 3 then
	// Display household GPS point on map
	execsystem(maketext("gps:%f,%f", SAMGPSLAT, SAMGPSLON));
endif;

// Show menu again
HOUSEHOLD_ACTION = notappl;
reenter;


PROC HOUSEHOLD_FINAL_RESULT
preproc
// prefill with current value from status file
if not loadcase(STATUS_DICT, CHOOSE_HOUSEHOLD) then
	STATFIR = 0; // Not started
endif;

onfocus
currentFinalResultCode = getlabel(STATFIR_VS1, STATFIR);

postproc
// Verify that interview is complete by looking at main questionnaire
// data file.
if HOUSEHOLD_FINAL_RESULT = 1 and
	(loadcase(POPSTANLFS_DICT, CHOOSE_HOUSEHOLD) = 0 or
	 ispartial(POPSTANLFS_DICT)) then

	 errmsg("Questionnaire is missing or partially complete. Please complete the interview");

endif;

// Copy from what was entered in this field to status file
STATPROV = SAMPROV;
STATDIST = SAMDIST;
STATDWNO = SAMDWNO;
STATHHNO = SAMHHNO;
STATFIR = HOUSEHOLD_FINAL_RESULT;
writecase(STATUS_DICT);

reenter INTERVIEWER_MENU;


PROC SUPERVISOR_REPORTS

if SUPERVISOR_REPORTS = 1 then
	// Completion report
	showCompletionReport(LOGIN);
elseif SUPERVISOR_REPORTS = 2 then
	// Population report
	showPopulationReport(LOGIN);
endif;

reenter;
