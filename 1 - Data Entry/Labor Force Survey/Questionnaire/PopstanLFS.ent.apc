{Application 'POPSTANLFS' logic file generated by CSPro}
PROC GLOBAL

// For fill in question text for name of day of one week before interview
string weekBeforeInterviewDate;

// For fill in question text for date four weeks before interview
string fourWeeksBeforeInterviewDate;;

// For fill in question text for date one year before interview
string oneYearBeforeInterviewDate;;

// Arrays for setvalueset
array codes(100);
array string stringCodes(100);
array string labels(100);

// Combined multi job and proxy code used in question text condition
// to workaround fact that question text conditions don't support
// and/or. Coded as follows:
//   1 - multiple job holder, direct response
//   2 - multiple job holder, proxy
//   3 - single job holder, direct
//   4 - single job holder, proxy
numeric multiJobProxy;

// Combined salary and proxy code used in question text condition
// to workaround fact that question text conditions don't support
// and/or. Coded as follows:
//   1 - wage/salary, direct response
//   2 - wage/salary, proxy
//   3 - no wage/salary, direct
//   4 - no wage/salary, proxy
numeric salaryProxy;

// Combined main job in own business and proxy code used in question text condition
// to workaround fact that question text conditions don't support
// and/or. Coded as follows:
//   1 - own business, direct response
//   2 - own business, proxy
//   3 - not own business, direct
//   4 - not own business, proxy
numeric ownBusinessProxy;

// Recompute ownBusinessProxy variable.
// Should be called in onfocus of any fields
// that use the variable in question text conditions.


function updateOwnBusinessProxy()
	if MJBEST = 1 and PXYCHK = 1 then
		ownBusinessProxy = 1;
	elseif MJBEST = 1 and PXYCHK = 2 then
		ownBusinessProxy = 2;
	elseif MJBEST <> 1 and PXYCHK = 1 then
		ownBusinessProxy = 3;
	elseif MJBEST <> 1 and PXYCHK = 2 then
		ownBusinessProxy = 4;
	endif;
end;

// Only individuals with age greater than or equal this
// age are asked labor questions
numeric minAgeEligibleForLabor = 15;

// Determine if member of household in demographics roster
// is eligible for labor section.
// Pass in the index (occurrence number) of the household
// member in the demographics roster.


function isEligibleForLabor(personNumber)
	isEligibleForLabor = DEMAG1(personNumber) >= minAgeEligibleForLabor;
end;

// Determine if checkbox is empty (no options selected)


function checkboxHasSelection(string checkbox)
	checkboxHasSelection = length(strip(checkbox)) > 0;
end;

// Compute day of week from date
// Returns 1 for Sunday, 2 for Monday...


function dayOfWeek(yyyymmdd)
	numeric referenceDay = 20170827; // This was be a Sunday
	numeric diff = datediff(referenceDay, yyyymmdd, "d");
	dayOfWeek = diff % 7 + 1;
end;


// Convert a numeric month (1 for January, 2 for February...)
// to a string representation in the currently selected language.


function string dayOfWeekToString(dayNum)
	string dayName;
	recode dayNum => dayName;
	  1  => tr("Sunday");
	  2  => tr("Monday");
	  3  => tr("Tuesday");
	  4  => tr("Wednesday");
	  5  => tr("Thursday");
	  6  => tr("Friday");
	  7  => tr("Saturday");
	endrecode;
	dayOfWeekToString = dayName;
end;

// Convert a numeric month (1 for January, 2 for February...)
// to a string representation in the currently selected language.


function string monthToString(monthNum)
	string monthName;
	recode monthNum => monthName;
	  1  => tr("January");
	  2  => tr("February");
	  3  => tr("March");
	  4  => tr("April");
	  5  => tr("May");
	  6  => tr("June");
	  7  => tr("July");
	  8  => tr("August");
	  9  => tr("September");
	  10  => tr("October");
	  11  => tr("November");
	  12  => tr("December");
	endrecode;
	monthToString = monthName;
end;

// Convert numeric date to month/day string e.g. "Friday October 6"


function string dateToDayMonthString(yyyymmdd)
	numeric month = int(yyyymmdd/100) % 100;
	numeric day = yyyymmdd % 100;
	dateToDayMonthString = maketext("%s %s %d", dayOfWeekToString(dayOfWeek(yyyymmdd)), monthToString(month), day);
end;

//  Array to display list of household members
array string householdMembersArray(20, 4);

// Display list of household members from demographic roster
// and have interviewer pick a member.
// Return row number of member chosen.


function pickFromHouseholdRoster()
	//  Fill array from demographics roster
	numeric personNumber;
	do personNumber = 1 while personNumber <= totocc(DEM_ROSTER)
		householdMembersArray(personNumber, 1) = strip(NAME(personNumber));
		householdMembersArray(personNumber, 2) = getlabel(DEMSEX_VS1, visualvalue(DEMSEX(personNumber)));
		if visualvalue(DEMSEX(personNumber)) = 1 then
			householdMembersArray(personNumber, 3) = getlabel(DEMREL_MALE, visualvalue(DEMREL(personNumber)));
		elseif visualvalue(DEMSEX(personNumber)) = 2 then
			householdMembersArray(personNumber, 3) = getlabel(DEMREL_FEMALE, visualvalue(DEMREL(personNumber)));
		else
			householdMembersArray(personNumber, 3) = "";
		endif;
		householdMembersArray(personNumber, 4) = edit("ZZ9", visualvalue(DEMAG1(personNumber)));
	enddo;

	//  Mark end of array
	householdMembersArray(personNumber, 1) = "";

	pickFromHouseholdRoster = showarray(householdMembersArray, title(tr("Name"), tr("Sex"), tr("Relationship"), tr("Age")));
end;

// List of modules in labor section.
// Column 1 is module label, column 2 is name of start field.
numeric numberOfModules = 7;
array string modules(numberOfModules,2) =
	"Proxy", 				 	"PXYSTART",
	"At work", 				 	"EMPSTART",
	"Temporary Absence", 	 	"ABSSTART",
	"Agriculture and Market", 	"AGFSTART",
	"Main Job", 				"MJBSTART",
	"Working Time", 			"WTSTART",
	"Job Search",			 	"SRHSTART";

// Used to display list of enabled modules in accept.
array string enabledModules(7);

// Display list of existing labor record occurrences in nice format (NAME, SEX, REL, AGE).
// Return row number of member chosen.


function pickFromLaborForms()
	//  Fill array from labor form
	numeric laborRowNumber;
	do laborRowNumber = 1 while laborRowNumber <= totocc(LABOR_FORM)
		numeric demoRowNumber = visualvalue(LBPPNO(laborRowNumber));
		householdMembersArray(laborRowNumber, 1) = strip(NAME(demoRowNumber));
		householdMembersArray(laborRowNumber, 2) = getlabel(DEMSEX_VS1, visualvalue(DEMSEX(demoRowNumber)));
		if visualvalue(DEMSEX(demoRowNumber)) = 1 then
			householdMembersArray(laborRowNumber, 3) = getlabel(DEMREL_MALE, visualvalue(DEMREL(demoRowNumber)));
		elseif visualvalue(DEMSEX(demoRowNumber)) = 2 then
			householdMembersArray(laborRowNumber, 3) = getlabel(DEMREL_FEMALE, visualvalue(DEMREL(demoRowNumber)));
		else
			householdMembersArray(laborRowNumber, 3) = "";
		endif;
		householdMembersArray(laborRowNumber, 4) = edit("ZZ9", visualvalue(DEMAG1(demoRowNumber)));
	enddo;

	//  Mark end of array
	householdMembersArray(laborRowNumber, 1) = "";

	pickFromLaborForms = showarray(householdMembersArray, title(tr("Name"), tr("Sex"), tr("Relationship"), tr("Age")));
end;

// Show list of enabled labor modules in accept menu for an occurrence in
// repeating labor form. Returns row number chosen.


function pickLaborModule(laborPersonNumber)

	// Loop through module array and display accept box listing only
	// modules that are enabled for occurrence laborPersonNumber
	// (based on start module field being set to 1).
	numeric nextEnabled = 1;
	do numeric moduleIndex = 1 while moduleIndex <= numberOfModules
		string moduleLabel = modules(moduleIndex, 1);
		// Get start field name from array
		string moduleStartField = modules(moduleIndex, 2);
		// If start field is set to 1 then it is enabled.
		if getvaluenumeric(moduleStartField,laborPersonNumber)  = 1 then
			enabledModules(nextEnabled) = moduleLabel;
			nextEnabled = nextEnabled + 1;
		endif;
	enddo;
	if nextEnabled > 1 then
		// Close array
		enabledModules(nextEnabled) = "";
		numeric pickedIndexInEnabled = accept(tr("Choose module"), enabledModules);

		// Translate result to index modules array
		string pickedLabel = enabledModules(pickedIndexInEnabled);
		numeric pickedIndexInModules;
		do numeric i = 1 while i <= numberOfModules
			if pickedLabel = modules(i, 1) then
				pickedIndexInModules = i;
			endif;
		enddo;

		pickLaborModule = pickedIndexInModules;
	else
		// Nothing to pick
		pickLaborModule = 0;
	endif;
end;

// Move to a field value based on field name in string variable and occurrence number.


function moveToFieldWithOccurrence(string fieldName, occurrence)
	move to maketext("%s(%d)", fieldName, occurrence) advance;
end;

// Display navigation aide


function goto()
	numeric section = accept(tr("Go To?"), tr("Identifiers"), tr("Demographics"), tr("Labor"));

	if section = 1 then
		move to GH_FORM advance;
	elseif section = 2 then
		numeric personNumber = pickFromHouseholdRoster();
		if personNumber > 0 then
			move to NAME(personNumber) advance;
		endif;
	elseif section = 3 then
		numeric laborPersonNumber = pickFromLaborForms();
		if laborPersonNumber > 0 then
			numeric moduleIndex = pickLaborModule(laborPersonNumber);
			if moduleIndex > 0 then
				string selectedModuleStartField = modules(moduleIndex, 2);
				moveToFieldWithOccurrence(selectedModuleStartField, laborPersonNumber);
			endif;
		endif;
	endif;
end;

// Display system calculator


function showCalculator()
	if getos() = 10 then
		// Windows
		execsystem("calc.exe");
	elseif getos() = 20 then
		// Android
		execsystem("app:com.google.android.calculator");
	else
		// Windows Universal
		errmsg("Sorry, calculator not supported.");
	endif;
end;

// Determine if individual is employed


function isEmployed()

	if EMPPAY = 1 then
		// Did work for pay last week
		isEmployed = 1;
	elseif pos(AGFCHK, "3") > 0 then
		// Other job or business
		isEmployed = 1;
	elseif AGFMKT=1 then
		// Agriculture or fishing all for sale
		isEmployed = 1;
	elseif AGFMAI=1 then
		// Agriculture or fishing more than half for sale
		isEmployed = 1;
	elseif AGFHIS=1 then
		// Agriculture or fishing for sale in past
		isEmployed = 1;
	elseif AGFHIR=1 then
		// Hired for agriculture or fishing
		isEmployed = 1;
	else
		isEmployed = 0;
	endif;

end;


PROC POPSTANLFS_FF

preproc

	userbar(clear);
	userbar(add button, "Go to...", goto);
	userbar(add button, "Calculator", showCalculator);
	userbar(show);


PROC POPSTANLFS_QUEST

preproc

	// Set occurrence labels to match existing data
	// in case where we return to existing data (e.g. partial save/modify mode).
	do numeric i = 1 while i <= totocc(DEM_ROSTER)
		setocclabel(DEM_ROSTER(i), NAME(i));
	enddo;

	do numeric i = 1 while i <= totocc(LABOR_FORM)
		if visualvalue(LBPPNO(i)) > 0 then
			setocclabel(LABOR_FORM(i), NAME(visualvalue(LBPPNO(i))));
		endif;
	enddo;


PROC GH_FORM


PROC PROVINCE

preproc

	// Retreive province from menu program via pff file parameter
	if sysparm("TO_PROVINCE") <> "" then
		PROVINCE = tonumber(sysparm("TO_PROVINCE"));

		// Make field protected so that it cannot be modified by
		// interviewer
		setproperty(PROVINCE, "Protected", "Yes");

	endif;


PROC DISTRICT

preproc

	// Retreive district from menu program via pff file parameter
	if sysparm("TO_DISTRICT") <> "" then
		DISTRICT = tonumber(sysparm("TO_DISTRICT"));

		// Make field protected so that it cannot be modified by
		// interviewer
		setproperty(DISTRICT, "Protected", "Yes");

	endif;


PROC GHDWNO

preproc

	// Retreive dwelling unit from menu program via pff file parameter
	if sysparm("TO_GHDWNO") <> "" then
		GHDWNO = tonumber(sysparm("TO_GHDWNO"));

		// Make field protected so that it cannot be modified by
		// interviewer
		setproperty(GHDWNO, "Protected", "Yes");

	endif;


PROC GHHHNO

preproc

	// Retreive household number from menu program via pff file parameter
	if sysparm("TO_GHHHNO") <> "" then
		GHHHNO = tonumber(sysparm("TO_GHHHNO"));

		// Make field protected so that it cannot be modified by
		// interviewer
		setproperty(GHHHNO, "Protected", "Yes");

	endif;


PROC GHAREA

preproc

	if sysparm("TO_GHAREA") <> "" then
		GHAREA = tonumber(sysparm("TO_GHAREA"));

		// Make field protected so that it cannot be modified by
		// interviewer
		setproperty(GHAREA, "Protected", "Yes");

	endif;


PROC GHVFDT

preproc

	// Prefill interview with current date
	if visualvalue(GHVFDT) = notappl then
		GHVFDT = sysdate("YYYYMMDD");
	endif;

postproc

	// Fill in string versions of dates to use as fills in question text
	weekBeforeInterviewDate = dayOfWeekToString(dayOfWeek(dateadd(GHVFDT, -8, "d")));
	fourWeeksBeforeInterviewDate = dateToDayMonthString(dateadd(GHVFDT, -(1 + 7 * 4), "d"));
	oneYearBeforeInterviewDate = dateToDayMonthString(dateadd(GHVFDT, -1, "y"));


PROC GHHRPL

preproc

	// Retreive replacement status from menu program via pff file parameter
	if sysparm("TO_GHHRPL") <> "" then
		GHHRPL = tonumber(sysparm("TO_GHHRPL"));

		// Make field protected so that it cannot be modified by
		// interviewer
		setproperty(GHHRPL, "Protected", "Yes");

	endif;


PROC GHINTID

preproc

	// Retreive interviewer id from menu program via pff file parameter
	if sysparm("TO_GHINTID") <> "" then
		GHINTID = tonumber(sysparm("TO_GHINTID"));

		// Operator ID will appear in field notes
		setoperatorid(sysparm("TO_GHINTID"));

	else
		// Unknown interviewer id since none was passed in from pff
		GHINTID = 999;
	endif;


PROC NAME

	// Set occurrence label of demographics to name of individual
	setocclabel(DEM_ROSTER, NAME);

	// Set label of case in case listing to ids plus name of head of household
	setcaselabel(POPSTANLFS_DICT, maketext("P:%d-DI:%d-DW:%d-HH:%d %s", PROVINCE,
					DISTRICT, GHDWNO, GHHHNO, strip(NAME(1))));


PROC DEMREL


onfocus

	// Use appropriate value set for gender
	if DEMSEX = 1 then
		setvalueset(DEMREL, DEMREL_MALE);
	else
		setvalueset(DEMREL, DEMREL_FEMALE);
	endif;

postproc

	// Head of household must be in first row of roster
	if curocc() = 1 and DEMREL(1) <> 1 then
		errmsg("The first household member listed must be the head of household")
		select("Change relationship", DEMREL, "Change name of first member", NAME);
	endif;

	if curocc() <> 1 and DEMREL = 1 then
		errmsg(tr("There may only be one head of household."));
		reenter;
	endif;


PROC DEMAG1

preproc

	// Fill in age based on date of birth if year of birth is known
	if DEMBTH_YEAR <> 9999 then
		// Year of birth is known, calculate age
		numeric dateOfBirthForAgeCalc;
		if DEMBTH_DAY = 99 and DEMBTH_MONTH <> 99 then
			// Day is unknown, month is known - assume middle of month
			dateOfBirthForAgeCalc = 15 + DEMBTH_MONTH * 100 + DEMBTH_YEAR * 10000;
		elseif DEMBTH_DAY <> 99 and DEMBTH_MONTH = 99 then
			// Day is known, month unknown - assume July
			dateOfBirthForAgeCalc = DEMBTH_DAY + 7 * 100 + DEMBTH_YEAR * 10000;
		elseif DEMBTH_DAY = 99 and DEMBTH_MONTH = 99 then
			// Day and month both unknown - assume July first
			dateOfBirthForAgeCalc = 0701 + DEMBTH_YEAR * 10000;
		else
			// All known - use actual date
			dateOfBirthForAgeCalc = DEMBTH;
		endif;

		DEMAG1 = datediff(dateOfBirthForAgeCalc, GHVFDT, "y");
		noinput;
	endif;

postproc

	// Ensure that head of household is 15 or over
	if DEMREL = 1 and DEMAG1 < 15 then
		warning(tr("%s is head of household and is only %d years old. Head of household should be at least 15 years old."), strip(NAME), DEMAG1)
		select(tr("Fix relationship"), DEMREL, tr("Fix age"), DEMBTH_DAY, tr("Ignore"), continue);
	endif;

	// Ensure that son/daughter of head is not older than head
	numeric ageDiff = DEMAG1(1) - DEMAG1;
	if DEMREL = 3 and ageDiff < 12 then
		warning(tr("%s is %s's child but the age difference is %d years. Parent should be at least 12 years older than child."),
					strip(NAME), strip(NAME(1)), ageDiff)
		select(tr("Correct relationship of ") + strip(NAME), DEMREL,
			   maketext("Reenter age of %s (%d years)", strip(NAME), DEMAG1), DEMBTH_DAY,
			   maketext("Correct age of %s (%d years)", strip(NAME(1)), DEMAG1(1)), DEMBTH_DAY(1),
			   tr("Ignore"), continue);
	endif;


PROC DEMEDL

preproc

	// Skip level of education for under 5
	ask if DEMAG1 >= 5;

postproc

	// Must be 18 or older for tertiary level education
	if DEMEDL = 7 and DEMAG1 < 18 then
		warning(tr("%s has tertiary level of education but is only %d years old. Must be at least 18 years old for this level of education."),
			strip(NAME), DEMAG1)
		select(tr("Fix age"), DEMBTH_DAY, tr("Fix level of education"), DEMEDL, tr("Ignore"), continue);
	endif;


PROC DEMEDC

preproc

	// Skip currently attending for under 5 and over 29
	ask if DEMAG1 in 5:29;


PROC DEMMORE

	// End roster if no more household members
	if DEMMORE = 2 then
		endgroup;
	endif;


PROC GHHHSIZE

preproc

	// Set household size to size of demographic roster
	GHHHSIZE = totocc(DEM_ROSTER);


PROC GHNELIGIBLE

preproc

	// Compute number of household members aged 15 or above
	GHNELIGIBLE = count(DEM_REC where isEligibleForLabor(curocc()));


PROC LBPPNO

onfocus

	// Build value set from all eligible members of household roster
	// That have not already been chosen.
	numeric nextValueSetEntry = 1;
	do numeric nextPerson = 1 while nextPerson <= totocc(DEM_ROSTER)

		// Check if eligible for labor section and not already chosen
		// in previous occurrence of this field
		numeric existingOccInLaborRoster = seek(LBPPNO = PPNO(nextPerson));
		if isEligibleForLabor(nextPerson) and existingOccInLaborRoster = 0 or existingOccInLaborRoster >= curocc() then
			// Add to value set
			codes(nextValueSetEntry) = PPNO(nextPerson);
			labels(nextValueSetEntry) = NAME(nextPerson);
			nextValueSetEntry = nextValueSetEntry + 1;
		endif;
	enddo;
	codes(nextValueSetEntry) = notappl;
	setvalueset(LBPPNO, codes, labels);

postproc

	// Check that the person chosen has not been entered already.
	// Since we exclude entries from previous occurrences from the
	// value set this will only happen if we go back to change
	// this field so we need to check for matches in
	// occurrences greater than this one. If we find one
	// we issue a warning since it is ok to temporarily have the
	// same person selected twice when swapping. In that case
	// they will be forced to change second one.
	numeric alreadyEntered = 0;
	do numeric i = curocc() + 1 while i <= totocc(LABOR_FORM)
		if visualvalue(LBPPNO(i)) = LBPPNO then
			alreadyEntered = 1;
		endif;
	enddo;
	if alreadyEntered then
		warning("The labor information for %s was already entered. Are you sure you want to enter it again?", strip(NAME(LBPPNO)))
		select("Choose a different household member", LBPPNO, "Ignore", continue);
	endif;

	// Set occurrence label for labor roster to name from demographics roster
	setocclabel(LABOR_FORM, NAME(LBPPNO));


PROC PXYSTART

preproc

	// Module universe: all persons of working age
	// Age check is taken care of in LBPPNO so no
	// need to repeat it here.
	PXYSTART = 1;


PROC PXYCHK

	// Skip PXYPPN and PXYREL if respondent themselves is answering questions
	if PXYCHK = 1 then
		skip to PXYEND;
	endif;


PROC PXYPPN

onfocus

	// Build value set from all eligible members of household roster
	numeric nextValueSetEntry = 1;
	do numeric nextPerson = 1 while nextPerson <= totocc(DEM_ROSTER)
		// Don't allow someone to be proxy for themselves
		if PPNO(nextPerson) <> LBPPNO then
			// Add to value set
			codes(nextValueSetEntry) = PPNO(nextPerson);
			labels(nextValueSetEntry) = NAME(nextPerson);
			nextValueSetEntry = nextValueSetEntry + 1;
		endif;
	enddo;
	codes(nextValueSetEntry) = notappl;
	setvalueset(PXYPPN, codes, labels);


PROC PXYREL

preproc

	// Prefill with relationship from demographic roster for head of household
	if LBPPNO = 1 then
		recode DEMREL(PXYPPN) => PXYREL;
			2 => 1; // spouse
			3 => 2; // son/daughter
			4 => 3; // mother/father
			5 => 4; // other relative
			6,7 => 5; // not related
		endrecode;
		noinput;
	endif;


PROC PXYEND

preproc

	PXYEND = 1;


PROC EMPSTART

preproc

	// Module universe: all persons of working age
	// Age check is taken care of in LBPPNO so no
	// need to repeat it here.
	EMPSTART = 1;


PROC EMPPAY

	// Skip to next module for those who worked for pay
	if EMPPAY = 1 then
		skip to EMPEND;
	endif;


PROC EMPPFT

	// Skip to next module for those who ran business for profit
	if EMPPFT = 1 then
		skip to EMPEND;
	endif;


PROC EMPEND

preproc

	EMPEND = 1;


PROC ABSSTART

preproc

	// Module universe: persons of working age who are not employed at work
	if not EMPFAM = 2 then
		skip to ABSEND;
	else
		ABSSTART = 1;
	endif;


PROC ABSJOB

postproc

	// End of module if no job/business in last week
	if ABSJOB = 2 then
		skip to ABSEND;
	endif;


PROC ABSWHY_OTHER

preproc

	// Only ask for other specify if other was selected
	ask if ABSWHY = 13;


PROC ABSSEA

preproc

	// Only ask if reason for absence is low/off season
	ask if ABSWHY = 2;


PROC ABSDUR

preproc

	// Only ask if absent due to off-season, education leave, other personal leave, temporary layoff, no clients or materials,
	// bad weather, strike or labour dispute, long-term disability, other
	ask if ABSWHY in 2,7:13;


PROC ABSPAY

preproc

	// Only ask for persons absent due to off season, persons absent for more than 3 months
	// and persons absent not sure when they will return to same job
	ask if ABSDUR in 2,97;


PROC ABSEND

preproc

	ABSEND = 1;


PROC AGFSTART

preproc

	// Module universe - persons of working age not working for pay in the reference week
	if not EMPPAY <> 1 then
		skip to AGFEND;
	else
		AGFSTART = 1;
	endif;


PROC AGFCHK

preproc

	ask if (EMPPFT=1 or EMPFAM=1 or ABSWHY in 3:6 or ABSSEA=1 or (ABSWHY in 7:13 and (ABSDUR=1 or ABSPAY=1)));

postproc

	// Ensure that at least one option is checked
	if not checkboxHasSelection(AGFCHK) then
		errmsg("Please choose at least one option");
		reenter;
	endif;


PROC AGFANY

PREPROC

	// Only ask if not absent or absent waiting to start new job or absent on leave/weather/strike/disability/other
	// and not being during absence.
	ask if ABSJOB=2 or ABSWHY=1 or (ABSWHY in 7:13 and ABSPAY in 2,97);


PROC AGFMKT

preproc

	// Ask question only if option 1 or 2 is selected and option 3 is not selected or
	// didn't previously report work but worked in farming/fishing last week
	ask if ((pos("1", AGFCHK) > 0 or pos("2", AGFCHK) >0) and pos("3", AGFCHK) = 0) or AGFANY = 1;


PROC AGFMAI

preproc

	// Ask only if products for both sale and family use
	ask if AGFMKT = 3 ;

postproc

	// If more than half sold
	if AGFMAI = 1 then
		skip to AGFEND;
	endif;


PROC AGFHIS

preproc

	// Only ask if prev question (main intended destination of products)
	// is "cannot say"
	ask if AGFMAI = 3 ;


PROC AGFHIR

preproc

	// Only ask if products produced now and in past for family use
	ask if AGFMKT = 2 or AGFMAI =2 or AGFHIS = 2 ;


PROC AGFGDS

preproc

	// Only ask if not hired by someone else
	ask if AGFHIR = 2;


PROC AGFOCC

preproc

	// Only ask if not hired by someone else
	ask if AGFHIR = 2;


PROC AGFDYS

preproc

	// Only ask if not hired by someone else
	ask if AGFHIR = 2;


PROC AGFHRS

preproc

	// Only ask if not hired by someone else
	ask if AGFHIR = 2;


PROC AGFEND

preproc

	AGFEND = 1;


PROC MJBSTART

preproc

	// Module universe: persons of working age, identified as employed in previous modules
	if not isEmployed() then
		skip to MJBEND;
	else
		MJBSTART = 1;
	endif;


PROC MJBEST

onfocus

	// Set combined multi job and proxy code used in question text condition
	// to workaround fact that question text conditions don't support
	// and/or.
	if MULTJB = 1 and PXYCHK = 1 then
		multiJobProxy = 1;
	elseif MULTJB = 1 and PXYCHK = 2 then
		multiJobProxy = 2;
	elseif MULTJB = 2 and PXYCHK = 1 then
		multiJobProxy = 3;
	elseif MULTJB = 2 and PXYCHK = 2 then
		multiJobProxy = 4;
	endif;

	// Set appropriate value set based on proxy status
	// and gender of respondent
	if PXYCHK = 1 then
		setvalueset(MJBEST, MJBEST_VS_DIRECT);
	elseif DEMSEX(LBPPNO) = 1 then
		setvalueset(MJBEST, MJBEST_VS_PROXY_MALE);	
	else
		setvalueset(MJBEST, MJBEST_VS_PROXY_FEMALE);
	endif;
PROC MJBPLC

onfocus

	// Customize first entry of value set based on proxy/no proxy
	codes(1) = 1;
	codes(2) = 2;
	codes(3) = 3;
	codes(4) = 4;
	codes(5) = 5;
	codes(6) = 6;
	codes(7) = 7;
	codes(8) = 8;
	codes(9) = notappl;

	if PXYCHK = 1 then
		labels(1) = getlabel(MJBPLC_VS_NO_PROXY, 1);
	else
		labels(1) = maketext(getlabel(MJBPLC_VS_PROXY, 1), strip(NAME(LBPPNO)));
	endif;
	labels(2) = getlabel(MJBPLC_VS1, 2);
	labels(3) = getlabel(MJBPLC_VS1, 3);
	labels(4) = getlabel(MJBPLC_VS1, 4);
	labels(5) = getlabel(MJBPLC_VS1, 5);
	labels(6) = getlabel(MJBPLC_VS1, 6);
	labels(7) = getlabel(MJBPLC_VS1, 7);
	labels(8) = getlabel(MJBPLC_VS1, 8);
	setvalueset(MJBPLC, codes, labels);


PROC MJBSAL

preproc

	// For employed persons not working in their own business
	ask if MJBEST in 2:5;


PROC MJBREM

preproc

	// For employed persons not working in their own business
	ask if MJBEST in 2:5;

onfocus

	// Set combined salary and proxy code used in question text condition
	// to workaround fact that question text conditions don't support
	// and/or.
	if MJBSAL = 1 and PXYCHK = 1 then
		salaryProxy = 1;
	elseif MJBSAL = 1 and PXYCHK = 2 then
		salaryProxy = 2;
	elseif MJBSAL = 2 and PXYCHK = 1 then
		salaryProxy = 3;
	elseif MJBSAL = 2 and PXYCHK = 2 then
		salaryProxy = 4;
	endif;


PROC MJBTRI

preproc

	// Only ask employees and apprentices or
	// other dependent workers who receive a wage or salary
	ask if MJBEST in 3:4 or (MJBEST in 2,5 and MJBSAL = 1);


PROC MJBDEE

preproc

	// Only ask for employees/apprentices who do not
	// receive wage or salary
	ask if MJBEST in 3:4 and  MJBSAL <> 1;

onfocus

	// Create dynamic value set to put you/NAME as fill in second option
	codes(1) = 1;
	labels(1) = getlabel(MJBDEE_VS1, 1);
	codes(2) = 2;
	if PXYCHK = 1 then
		labels(2) = tr("YOU ARE RESPONSIBLE FOR THAT");
	else
		labels(2) = maketext("%s IS RESPONSIBLE FOR THAT", toupper(strip(NAME(LBPPNO))));
	endif;

	codes(3) = notappl; // mark end of value set in array
	setvalueset(MJBDEE, codes, labels);


PROC MJBINS

preproc

	// Only ask for employees and apprentices or other dependent
	// workers who receive a wage or salary
	ask if MJBEST in 3:4 or (MJBEST in 2,5 and MJBSAL = 1);


PROC MJBEND

preproc

	MJBEND = 1;


PROC DMWSTART

preproc

	// Module universe: persons that work in a household and are employed by a household
	if not(MJBPLC = 2 and MJBINS = 4 and MJBTRI = 1) then
		skip to DMWEND;
	else
		DMWSTART = 1;
	endif;


PROC DMWHHB

preproc

	// For persons that work in a household and are employed by a household
	ask if MJBPLC=2 and MJBINS=4 and MJBTRI=1


PROC DMWHBE

preproc

	// For persons that work in a household and are employed by a household
	ask if DMWHHB = 1;


PROC DMWCHK

preproc

	// For persons employed by a confirmed household
	ask if DMWHHB in 2,3 or DMWHBE = 2;


PROC DMWOCC

preproc

	// For persons who provide domestic services in a household
	ask if DMWCHK = 1;


PROC DMWEND

preproc

	DMWEND = 1;


PROC IMJSTART

preproc

	// Module universe: persons of working age, identified as employed by previous modules
	if not isEmployed() then
		skip to IMJEND;
	else
		IMJSTART = 1;
	endif;


PROC IMJREF

preproc

	// Only ask for non-domestic workers
	ask if DMWCHK <> 1;

onfocus

	updateOwnBusinessProxy();


PROC IMJNAM

preproc

	// Only ask if business has name
	ask if IMJREF = 1;

onfocus

	updateOwnBusinessProxy();


PROC IMJMAC

preproc

	// Only ask for non-domestic workers
	ask if DMWCHK <> 1;

onfocus

	updateOwnBusinessProxy();


PROC IMJEND

preproc

	IMJEND = 1;


PROC DMJSTART

preproc

	// Module universe: persons of working age, identified as employed by previous modules
	if not isEmployed() then
		skip to DMJEND;
	else
		DMJSTART  = 1;
	endif;


PROC DMJSYR

onfocus

	updateOwnBusinessProxy();


PROC DMJSMO


PROC DMJEND

preproc

	DMJEND = 1;


PROC OMJSTART

preproc

	// Module universe: persons of working age, identified as employed by previous modules
	if not isEmployed() then
		skip to OMJEND;
	else
		OMJSTART = 1;
	endif;


PROC OMJMTD

preproc

	// Only ask for non-domestic workers
	ask if DMWCHK = 2;


PROC OMJTLE

preproc

	// Only ask for non-domestic workers
	ask if DMWCHK = 2;


PROC OMJEND

preproc

	OMJEND = 1;


PROC WTSTART

preproc

	// Module universe: persons of working age, identified as employed by previous modules
	if not isEmployed() then
		skip to WTEND;
	else
		WTSTART = 1;
	endif;


PROC ACDYSM

	// Ensure that at least one option is checked
	if not checkboxHasSelection(ACDYSM) then
		errmsg("Please choose at least one option");
		reenter;
	endif;

	// Make sure they didn't chose both absent and one or more days
	numeric choseAtLeastOneDay = poschar("1234567", ACDYSM) > 0;
	numeric choseAbsent = pos("8", ACDYSM);
	if choseAtLeastOneDay and choseAbsent then
		errmsg("'Absent' can only be used for persons who were absent the whole week."  );
		reenter;
	endif;

	// If absent skip all the actual hours last week questions
	// and go direct to usual hours
	if choseAbsent then
		skip to USHRSM;
	endif;



PROC ACHRSM


preproc

	// Ask hours only for days worked in last week
	// (options checked in previous question)
	ask if pos( edit( "9" , curocc(ACHRSM_ROSTER) ) , ACDYSM ) > 0;



PROC ACHRM1

preproc

	// Only ask if chose "don't know" for one or more
	// days.
	ask if ACHRSM has 98;

postproc

	if ACHRM1 <> 98 then
		// If they answer other than "don't know" skip the check and corrections
		skip to ACEQUM;
	elseif ACHRM1 = 98 then
		// If they answer "don't know" skip to usual hours
		skip to USHRSM;
	endif;


PROC ACHRSUMMJ

preproc

	ACHRSUMMJ = sum(ACHRSM);




PROC ACHRCM

	// If sum of hours is correct, skip correction
	if ACHRCM = 1 then
		skip to ACEQUM;
	endif;


PROC ACHRUM



PROC ACEQUM



PROC USHRSM

preproc

	// Only ask usual hours if actual and usual reported different
	// in previous question
	ask if ACEQUM = 2;


PROC NUMJBS

preproc

	// Only for multiple job holders
	if MULTJB = 2 then
		skip to TOTACH;
	endif;

postproc

	// Skip second/other job info if only reports single job here
	if NUMJBS = 1 then
		skip to TOTACH;
	endif;


PROC ACDYSS

	// Ensure that at least one option is checked
	if not checkboxHasSelection(ACDYSS) then
		errmsg("Please choose at least one option");
		reenter;
	endif;

	// Make sure they didn't chose both absent and one or more days
	numeric choseAtLeastOneDay = poschar("1234567", ACDYSS) > 0;
	numeric choseAbsent = pos("8", ACDYSS);
	if choseAtLeastOneDay and choseAbsent then
		errmsg("'Absent' can only be used for persons who were absent the whole week."  );
		reenter;
	endif;

	// If absent skip all the actual hours last week questions
	// and go direct to usual hours
	if choseAbsent then
		skip to USHRSS;
	endif;


PROC ACHRSS

preproc

	// Ask hours only for days worked in last week
	// (options checked in previous question)
	ask if pos( edit( "9" , curocc(ACHRSS_ROSTER) ) , ACDYSS ) > 0;


PROC ACHRS1

preproc

	// Only ask if chose "don't know" for one or more
	// days.
	ask if ACHRSS has 98;

postproc

	if ACHRS1 <> 98 then
		// If they answer other than "don't know" skip the check and corrections
		skip to ACEQUS;
	elseif ACHRS1 = 98 then
		// If they answer "don't know" skip to usual hours
		skip to USHRSS;
	endif;


PROC ACHRSUMSJ

preproc

	ACHRSUMSJ = sum(ACHRSS);


PROC ACHRCS

	// If sum of hours is correct, skip correction
	if ACHRCS = 1 then
		skip to ACHRSO;
	endif;


PROC USHRSS

preproc

	// Only ask usual hours if actual and usual reported different
	// in previous question
	ask if ACEQUS = 2;


PROC ACHRSO

preproc

	// Only if works more than 2 jobs
	ask if NUMJBS = 3;


PROC ACEQUO

preproc

	// Only if works more than 2 jobs
	ask if NUMJBS = 3;


PROC USHRSO

preproc

	// Only if works more than 2 jobs and hours worked last week different from usual
	ask if NUMJBS = 3 and ACEQUO = 2;


PROC TOTACH

preproc

	// Compute total actual hours across all jobs

	// First job
	numeric actualHoursMainJob;
	if pos("8", ACDYSM) > 0 then
		// Absent last week
		actualHoursMainJob = 0;
	elseif ACHRSM has 98 then
		// Don't know individual days
		if ACHRM1 = 998 then
			// Don't know average
			actualHoursMainJob = 998;
		else
			// Use average times days worked
			actualHoursMainJob = length(strip(ACDYSM)) * ACHRM1;
		endif;
	elseif ACHRCM = 1 then
		// Computed total verified, use it
		actualHoursMainJob = ACHRSUMMJ;
	else
		// Use corrected total
		actualHoursMainJob = ACHRUM;
	endif;

	// Second job
	numeric actualHoursSecondJob;
	if NUMJBS in 2,3 then
		if pos("8", ACDYSS) > 0 then
			// Absent last week
			actualHoursSecondJob = 0;
		elseif ACHRSS has 98 then
			// Don't know individual days
			if ACHRS1 = 998 then
				// Don't know average
				actualHoursSecondJob = 998;
			else
				// Use average times days worked
				actualHoursSecondJob = length(strip(ACDYSS)) * ACHRS1;
			endif;
		elseif ACHRCS = 1 then
			// Computed total verified, use it
			actualHoursSecondJob = ACHRSUMSJ;
		else
			// Use corrected total
			actualHoursSecondJob = ACHRUS;
		endif;
	else
		// No second job
		actualHoursSecondJob = 0;
	endif;

	// Other jobs
	numeric actualHoursOtherJobs;
	if NUMJBS = 3 then
		actualHoursOtherJobs = ACHRSO;
	else
		// No other jobs
		actualHoursOtherJobs = 0;
	endif;
	
	// Sum first, second and other to get total hours
	if actualHoursMainJob = 998 or actualHoursSecondJob = 998 or actualHoursOtherJobs = 998 then
		// One or more unknown so total is unknown
		TOTACH = 998;
	else
		TOTACH = actualHoursMainJob + actualHoursSecondJob + actualHoursOtherJobs;
	endif;

postproc

	// Compute the usual hours worked total
	numeric usualHoursWorkedMainJob;
	if ACEQUM = 2 then
		// Entered value
		usualHoursWorkedMainJob = USHRSM;
	else
		// Same as actual
		usualHoursWorkedMainJob = actualHoursMainJob;
	endif;

	numeric usualHoursWorkedSecondJob;
	if ACEQUS = 2 then
		// Entered value
		usualHoursWorkedSecondJob = USHRSS;
	else
		// Same as actual
		usualHoursWorkedSecondJob = actualHoursSecondJob;
	endif;

	numeric usualHoursWorkedOtherJobs;
	if ACEQUO = 2 then
		// Entered value
		usualHoursWorkedOtherJobs = USHRSO;
	else
		// Same as actual
		usualHoursWorkedOtherJobs = actualHoursOtherJobs;
	endif;

	// Sum first, second and other to get total hours
	if usualHoursWorkedMainJob = 998 or usualHoursWorkedSecondJob = 998 or usualHoursWorkedOtherJobs = 998 then
		// One or more unknown so total is unknown
		TOTUSH = 998;
	else
		TOTUSH = usualHoursWorkedMainJob + usualHoursWorkedSecondJob + usualHoursWorkedOtherJobs;
	endif;

PROC WNTMRH

preproc

	// Only for those typically working less than full-time
	ask if TOTUSH < 40;


PROC AVLMRH

preproc

	// Only ask if desire to work more hours
	ask if WNTMRH = 1;


PROC NMMRHR

preproc

	// Only if available to work more hours
	ask if WNTMRH = 1 and AVLMRH = 1;


PROC WTEND

preproc

	WTEND = 1;


PROC SRHSTART

preproc;

	// Module universe - persons of working age not in employment
	if isEmployed() then
		skip to SRHEND;
	else
		SRHSTART = 1;
	endif;


PROC SRHJOB

preproc

	ask if DEMAG1(LBPPNO)>=15 and (AGFANY=2 or AGFMKT=3);


PROC SRHBUS

preproc

	//Only ask of those who did not search for a job (and were of working age and not employed)
	ask if SRHJOB=2;


PROC SRHMTD

preproc

	//only ask of those who looked for a job or tried to start a business
	ask if SRHJOB=1 or SRHBUS=1;


PROC SRHMTD_OTHER

preproc

	//only ask for those who said the method was other
	ask if SRHMTD=13;


PROC SRHACT

preproc

	//only ask for those who indicated reading advertisements as their main method
	ask if SRHMTD=3;


PROC SRHOTH

preproc

	// Only ask for those who did some additional search activity (SRHACT=1)
	ask if SRHACT=1;


PROC SRHOTH_OTHER

preproc

	// Only ask for those who said the method was other
	ask if SRHOTH=13;


PROC SRHDUR

preproc

	//Only ask of those who looked for a job or tried to start a business
	ask if SRHJOB=1 or SRHBUS=1;


PROC SRHYER

preproc

	// Only for persons not employed who did not look for a job in the last 4 weeks
	ask if SRHJOB = 2 and SRHBUS = 2;


PROC SRHDWY

preproc

	// Only ask those who wanted to work
	ask if SRHDES = 1;


PROC SRHDWY_OTHER

preproc

	// Only ask those with a 'Other' reason for not seeking work
	ask if SRHDWY = 13;
PROC SRHFTR

preproc

	//Ask those who gave 'Waiting to start a new job or business' as the reason for not seeking work (SRHDWY=4)
	//or those who gave their reason for absence as waiting to start a new job or business (ABSWHY=1)
	ask if (ABSWHY=1 and AGFANY=2) or SRHDWY=4;


PROC SRHFAN

preproc

	//Ask for future starters
	ask if (ABSWHY=1 and AGFANY=2) OR SRHDWY=4;


PROC SRHAVN
preproc

	// Only for persons not employed who sought work or want to work
	ask if SRHJOB = 1 OR SRHBUS = 1 OR SRHDES = 1 ;
PROC SRHAVL
preproc

	// Only for persons not employed not available in reference week
	ask if SRHFAN = 2 OR SRHAVN = 2 
PROC SRHNAR
preproc

	// Persons not employed not available to work
	ask if SRHAVL = 2;
PROC SRHMAC
preproc

	// Persons not employed who do not want to work
	ask if SRHDES = 2;
PROC SRHMAC_OTHER
preproc

	// Only ask those with a 'Other' reason for not seeking work
	ask if SRHMAC = 8;
PROC SRHEND

preproc

	SRHEND=1;


PROC INDIVEND

preproc

	INDIVEND = 1;

postproc

	// End looping form after completing last individual interview
	if curocc() = GHNELIGIBLE then
		endgroup;
	endif;


