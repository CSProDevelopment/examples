PROC GLOBAL

// Map object that will be used to display markers
map structuresMap;

string basemapSettingKey = "Listing with Map basemap";

// Launch the listing application to modify the structure with number structureNumber
function modifyStructure(numeric structureNumber)

	pff listing_pff;
	listing_pff.load("..\Listing\Listing.pff");
	listing_pff.setproperty("Key", maketext("%03d", structureNumber));
	listing_pff.exec();

end;

// Launch the listing application to add a new structure
function addStructure()

	pff listing_pff;
	listing_pff.load("..\Listing\Listing.pff");
	listing_pff.setproperty("StartMode", "Add");
	listing_pff.exec();

end;

// Delete a structure from the data file and the corresponding marker from the map
function deleteStructure(numeric marker, numeric structureNumber)

	// Load the selected structure
	ST_NUMBER = structureNumber;
	if not loadcase(STRUCTURES_DICT, ST_NUMBER) then
		errmsg("Error invalid structure %v", ST_NUMBER);
		exit;
	endif;

	// Confirm deletion
	string confirmationPrompt = maketext("Are you sure you want to delete the structure %v %s", ST_NUMBER, strip(ST_NAME));
	if accept(confirmationPrompt, "Yes", "No") = 1 then
		// Delete structure from data file
		delcase(STRUCTURES_DICT);
		// Remove marker from map
		structuresMap.removeMarker(marker);
	endif;
end;

// Callback function that is called when you click on a marker
// Displays information on the structure and actions
// to take: modify and delete
function onClickMarker(numeric marker, numeric structureNumber)

	// Load the selected structure
	ST_NUMBER = structureNumber;
	if not loadcase(STRUCTURES_DICT, ST_NUMBER) then
		errmsg("Error invalid structure %v", ST_NUMBER);
		exit;
	endif;

	// Ask user what they want to do
	string description = maketext("%v: %s - %l", ST_NUMBER, strip(ST_NAME), ST_TYPE);
	numeric choice = accept(description, "Modify", "Delete", "Cancel");
	if choice = 1 then
		modifyStructure(ST_NUMBER);
	elseif choice = 2 then
		deleteStructure(marker, structureNumber);
	else
		// Cancel - do nothing
	endif;
end;

// Add a marker to the map for each structure in the data file
// markerFilter limits markers to those structures with type
// that matches markerFilter. It can either be one of the values
// for the variable ST_TYPE or it can be 999 to show all structures.
function addMarkersToMap(numeric markerFilter)

	forcase STRUCTURES_DICT do

		// Only add markers that match the filter
		if ST_TYPE = markerFilter or markerFilter = 999 then

			// Add a marker for the household
			numeric marker = structuresMap.addMarker(ST_LATITUDE, ST_LONGITUDE);

			// Make the marker icon be the houshold number
			structuresMap.setMarkerText(marker, maketext("%v", ST_NUMBER));

			// Set the description to be the name and type (<br/> adds a newline)
			structuresMap.setMarkerDescription(marker, maketext("%s<br/>%l", ST_NAME, ST_TYPE));

			// Set callback for clicking on marker
			structuresMap.setMarkerOnClick(marker, onClickMarker(marker, ST_NUMBER));
		endif;
	endfor;
end;

// Callback function called when user clicks on filter button
function filterMarkers()
	valueset structureTypes;
	structureTypes.add("All", 999);
	structureTypes.add(ST_TYPE_VS1);
	numeric filter = structureTypes.show("Choose type of structure to show");
	if filter > 0 then
		structuresMap.clearMarkers();
		addMarkersToMap(filter);
	endif;
end;

// Set map basemap
function setBasemap(string basemap)
	if basemap = "Normal" then
		structuresMap.setBasemap(Normal);
	elseif basemap = "Hybrid" then
		structuresMap.setBasemap(Hybrid);
	elseif basemap = "Satellite" then
		structuresMap.setBasemap(Satellite);
	elseif basemap = "Terrain" then
		structuresMap.setBasemap(Terrain);
	endif;
end;

// Callback function called when user clicks on change basemap button
function changeBasemap()
	list string options = "Normal", "Hybrid", "Satellite", "Terrain";
	numeric selection = options.show("Choose basemap");
	if selection > 0 then
		string basemap = options(selection);
		setBasemap(basemap);
		// persist the basemap in settings
		savesetting(basemapSettingKey, basemap);
	endif;
end;

// Quit application and return to applications list
function endApplication()
	stop(1);
end;


PROC LISTINGMENU_FF
preproc

if getos() = 10 then
	errmsg("Please run this on an Android device. This application requires mapping functions which are not supported on Windows.");
	stop(1);
endif;


PROC SHOW_MAP
preproc

// Populate the map with markers from previously recorded structures
// in structures dictionary
addMarkersToMap(999);

// Add a button to add a new structure
structuresMap.addImageButton("Resources/add.png", addStructure());

// Add a button to filter structures by type
structuresMap.addImageButton("Resources/filter.png", filterMarkers());

// Add a button to change basemap
structuresMap.addImageButton("Resources/layers.png", changeBasemap());

// Add a button to quit the application
structuresMap.addImageButton("Resources/close.png", endApplication());

// Set basemap to what was saved in settings
if loadsetting(basemapSettingKey) <> "" then
	setBasemap(loadsetting(basemapSettingKey));
endif;

// Show the map
structuresMap.show();

// If the user leaves the map by hitting back button they are finished so end the application
endApplication();
