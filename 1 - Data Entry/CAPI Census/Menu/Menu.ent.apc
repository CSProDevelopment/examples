PROC GLOBAL


// ------------------
// ------------------ Global variables
// ------------------


numeric supervisor_password = 1234;
string login_setting_key = "PSC Login";
string assignment_setting_key = "PSC Assignment";
string segment_alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
List string months = "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec";


// ------------------
// ------------------ CAPI text variables
// ------------------


string capi_publish_date;
string capi_staff_name;	// Name of the person who logged into the system
string capi_staff_role;
string capi_manage_staff_name; // Various names of interviewers used throughout the system
string capi_province_name;
string capi_district_name;
string capi_ea_name;
numeric capi_ea_assigned_count;
numeric capi_household_complete_count;
numeric capi_household_partial_count;


// ------------------
// ------------------ Function to override the back button on Android (and the stop button on Windows)
// ------------------


// The highlighted function determines whether the user has passed through the supervisor or interviewer menu.
// If the menu has been passed through, the back button on Android (and the stop button on Windows) will reenter
// the menu when pressed. Otherwise, the button will exit the application.
function OnStop()

	if highlighted(M_SUPERVISOR_MENU) then
		reenter M_SUPERVISOR_MENU;

	elseif highlighted(M_INTERVIEWER_MENU) then
		reenter M_INTERVIEWER_MENU;

	else
		// Quit the application. Main menu has not been entered
		stop(1);

	endif;

end;


// ------------------
// ------------------ Functions to simplify looking up geographic names
// ------------------


function string LookupGeographyName(province, district)

	G_PROVINCE = province;
	G_DISTRICT = district;
	G_EA = notappl;

	if loadcase(PSC_GEOCODES_DICT, G_PROVINCE, G_DISTRICT, G_EA) then
		LookupGeographyName = strip(G_AREA_NAME);

	else
		LookupGeographyName = "<Invalid Geocode>";

	endif;

end;


function string LookupProvinceName(province)

	LookupProvinceName = LookupGeographyName(province, notappl);

end;


function string LookupDistrictName(province, district)

	LookupDistrictName = LookupGeographyName(province, district);

end;


function string LookupEAName(ea)

	LookupEAName = maketext("EA%03d", ea);

end;


function string LookupDetailedHouseholdName()

	string detailedName = maketext("%v%v", HH_SEGMENT, HH_NUMBER);

	if count(HH_NAME) >= 1 and HH_NAME(1) <> "" then
		detailedName = detailedName + maketext(" - %v", strip(HH_NAME(1)));
	endif;

	LookupDetailedHouseholdName = detailedName;

end;


function string LookupStaffName(string code)

	// If staff member's information is already loaded, don't load again
	if S_STAFF_CODE = code or loadcase(PSC_STAFF_DICT, code) then
		LookupStaffName = strip(S_STAFF_NAME);

	else
		LookupStaffName = "<Invalid Staff>";

	endif;

end;


// ------------------
// ------------------ PFF functions
// ------------------


function LaunchHouseholdProgram()

	// Load the default settings from the existing household PFF
	Pff household_pff;
	household_pff.load("../Household/Household.pff");

	// Set the Key to indicate what household to modify/add
	household_pff.setProperty("Key",
		maketext("%v%v%v%v%v", HH_PROVINCE, HH_DISTRICT, HH_EA, HH_SEGMENT, HH_NUMBER));

	// Set some other metadata
	household_pff.setProperty("ProvinceName", LookupProvinceName(HH_PROVINCE));
	household_pff.setProperty("DistrictName", LookupDistrictName(HH_PROVINCE,HH_DISTRICT));
	household_pff.setProperty("EAName", LookupEAName(HH_EA));
	household_pff.setProperty("InterviewerCode", M_LOGIN);
	household_pff.setProperty("SupervisorCode", S_SUPERVISOR_STAFF_CODE);
	household_pff.setProperty("StaffName", LookupStaffName(M_LOGIN));

	// Run the household application
	household_pff.exec();

end;


// ------------------
// ------------------ Report functions
// ------------------


function InitInterviewerStatusRecord()
	
	numeric ws_counter = 0;
	
	// Loop through all interviewers that are supervised by the currently logged in supervisor
	forcase PSC_STAFF_DICT where S_SUPERVISOR_STAFF_CODE = M_LOGIN do
		
		inc(ws_counter);
		
		if ws_counter > count(INTERVIEWER_STATUS_RECORD) then
			insert(INTERVIEWER_STATUS_RECORD, ws_counter);
		endif;
		
		// All variables in occurrence of INTERVIEWER_STATUS_RECORD record
		ISR_INTERVIEWER_NAME(ws_counter) = S_STAFF_NAME;
		ISR_COMPLETE_HOUSEHOLDS(ws_counter) = 0;
		ISR_PARTIAL_HOUSEHOLDS(ws_counter) = 0;
		ISR_LAST_INTERVIEW(ws_counter) = 0;

		forcase PSC_ASSIGNMENTS_DICT where A_STAFF_CODE = S_STAFF_CODE do
		
			forcase PSC_HOUSEHOLD_DICT where HH_PROVINCE = A_PROVINCE
				and HH_DISTRICT = A_DISTRICT and HH_EA = A_EA
				and HH_SEGMENT = A_SEGMENT do
		
				if ispartial(PSC_HOUSEHOLD_DICT) then
					// Sum partial households
					inc(ISR_PARTIAL_HOUSEHOLDS(ws_counter));
				else
					// Sum complete households
					inc(ISR_COMPLETE_HOUSEHOLDS(ws_counter));
				endif;
				
				if ISR_LAST_INTERVIEW(ws_counter) < HH_END_INTERVIEW_TIME then
					// Assign the last interview time and date
					ISR_LAST_INTERVIEW(ws_counter) = HH_END_INTERVIEW_TIME;
				endif;
				
			endfor;
			
		endfor;
		
	endfor;
	
	if ws_counter < count(INTERVIEWER_STATUS_RECORD) then
		delete(INTERVIEWER_STATUS_RECORD, ws_counter + 1, count(INTERVIEWER_STATUS_RECORD));		
	endif;
	
end;


// ------------------
// ------------------ Sync functions
// ------------------


string MenuPenMd5;
string MenuPffMd5;


function SaveApplicationSnapshot()

	MenuPenMd5 = diagnostics("md5", "Menu.pen");
	MenuPffMd5 = diagnostics("md5", "Menu.pff");

end;


function RestartApplicationIfModified()

	// Compare the saved MD5s against the new MD5s to see if the files have changed
	if MenuPenMd5 <> diagnostics("md5", "Menu.pen") or MenuPffMd5 <> diagnostics("md5", "Menu.pff") then
		errmsg("The application has been updated and will be restarted.");
		execpff("Menu.pff", stop);
	endif;

end;


function StartServer()

	SaveApplicationSnapshot();

	if not syncserver(Bluetooth) then
		errmsg("Failed to start Bluetooth server.");
	endif;

	RestartApplicationIfModified();

end;


// Not a standalone sync function. Does not call syncconnect or syncdisconnect.
function SyncDataWithInterviewer()

	numeric success = 1;

	forcase PSC_STAFF_DICT where S_STAFF_CODE = M_LOGIN or S_SUPERVISOR_STAFF_CODE = M_LOGIN do

		// Synchronize staff code for supervisor and their interviewers. Supervisor's staff code is sent, so supervisor
		// is able to log onto their account using interviewer's device.
		// Sync BOTH is used, because the supervisor and interview write to the staff data.
		if success and not syncdata(BOTH, PSC_STAFF_DICT) then
			errmsg("Failed to transfer interviewer's staff data. Transfer aborted.");
			success = 0;
			break;
		endif;

	endfor;

	// Create universe for supervisory area.
	string universeStr = maketext("%v%v", M_CURRENT_PROVINCE, M_CURRENT_DISTRICT);

	// Synchronize assignments in supervisory area.
	// Sync BOTH is used, because the supervisor and interview write to the assignments data.
	if success and not syncdata(BOTH, PSC_ASSIGNMENTS_DICT, universeStr) then
		errmsg("Failed to transfer assignment data. Transfer aborted.");
		success = 0;
	endif;

	// Synchronize households in supervisory area.
	// Sync BOTH is used to distribute household data to all interviewers. This increases redundancy in case the
	// supervisor's device is lost. Alternatively, a GET can be used, because only the interviewer writes to the
	// household data.
	if success and not syncdata(BOTH, PSC_HOUSEHOLD_DICT, universeStr) then
		errmsg("Failed to transfer household data. Transfer aborted.");
		success = 0;
	endif;

	// Send all geocodes.
	// Sync PUT is used, because the interviewer only reads the geocodes data.
	if success and not syncdata(PUT, PSC_GEOCODES_DICT) then
		errmsg("Failed to transfer geocode data.");
		success = 0;
	endif;

	SyncDataWithInterviewer = success;

end;


function SyncWithInterviewer()

	numeric success = 1;

	if syncconnect(Bluetooth) then

		success = SyncDataWithInterviewer();

		if success and not syncfile(PUT, "./Menu.pff", "./Menu.pff") then
			errmsg("Failed to transfer Menu.pff. Transfer aborted.");
			success = 0;
		endif;

		if success and not syncfile(PUT, "./Menu.pen", "./Menu.pen") then
			errmsg("Failed to transfer Menu.pen. Transfer aborted.");
			success = 0;
		endif;

		if success and not syncfile(PUT, "../Household/Household.pen", "../Household/Household.pen") then
			errmsg("Failed to transfer Household.pen. Transfer aborted.");
			success = 0;
		endif;

		if not syncdisconnect() then
			errmsg("Failed to disconnect from Bluetooth server.");
			success = 0;
		endif;

	else
		errmsg("Failed to connect to Bluetooth server.");
		success = 0;

	endif;

	SyncWithInterviewer = success;

end;


// Not a standalone sync function. Does not call syncconnect or syncdisconnect.
function SyncDataWithHQ()

	numeric success = 1;

	forcase PSC_STAFF_DICT where S_STAFF_CODE = M_LOGIN or S_SUPERVISOR_STAFF_CODE = M_LOGIN do

		// Synchronize staff code for supervisor and their interviewers.
		// Sync PUT is used, because HQ will only read the staff data.
		if success and not syncdata(PUT, PSC_STAFF_DICT) then
			errmsg("Failed to transfer interviewer's staff data. Transfer aborted.");
			success = 0;
			break;
		endif;

	endfor;

	// Create universe for supervisory area.
	string universeStr = maketext("%v%v", M_CURRENT_PROVINCE, M_CURRENT_DISTRICT);

	// Synchronize assignments in supervisory area.
	// Sync PUT is used, because HQ will only read the assignments data.
	if success and not syncdata(PUT, PSC_ASSIGNMENTS_DICT, universeStr) then
		errmsg("Failed to transfer assignment data. Transfer aborted.");
		success = 0;
	endif;

	// Synchronize households in supervisory area.
	// Sync PUT is used, because HQ will only read the household data.
	if success and not syncdata(PUT, PSC_HOUSEHOLD_DICT, universeStr) then
		errmsg("Failed to transfer household data. Transfer aborted.");
		success = 0;
	endif;

	SyncDataWithHQ = success;

end;


numeric full_sync = 1;
numeric app_sync = 2;


function SyncWithHQ(syncType)

	numeric success = 1;

	SaveApplicationSnapshot();

	if syncconnect(Dropbox) then

		if syncType = full_sync then
			success = SyncDataWithHQ();
		endif;

		// Save the MD5 value before syncing
		string menuPFF = diagnostics("md5", "./Menu.pff");
		string menuPEN = diagnostics("md5", "./Menu.pen");

		if success and not syncfile(GET, "/DeployPSC/Menu/Menu.pff", "./Menu.pff") then
			errmsg("Failed to receive Menu.pff. Transfer aborted.");
			success = 0;
		endif;

		if success and not syncfile(GET, "/DeployPSC/Menu/Menu.pen", "./Menu.pen") then
			errmsg("Failed to receive Menu.pen. Transfer aborted.");
			success = 0;
		endif;

		if success and not syncfile(GET, "/DeployPSC/Household/Household.pen", "../Household/Household.pen") then
			errmsg("Failed to receive Household.pen. Transfer aborted.");
			success = 0;
		endif;

		// Receive all geocodes. This is a lookup file, so update with applications.
		// Sync GET is used, because only HQ writes to the geocodes data.
		if success and not syncdata(GET, PSC_GEOCODES_DICT) then
			errmsg("Failed to transfer geocode data.");
			success = 0;
		endif;

		if not syncdisconnect() then
			errmsg("Failed to disconnect from Dropbox.");
			success = 0;
		endif;

	else
		errmsg("Failed to connect to Dropbox.");
		success = 0;

	endif;

	RestartApplicationIfModified();

	SyncWithHQ = success;

end;


// ------------------
// ------------------ Miscellaneous functions
// ------------------


function SwitchUsers()

	// Clear the saved login and assignment
	savesetting(login_setting_key, "");
	savesetting(assignment_setting_key, "");
	reenter LOGIN_FORM;

end;


function SwitchAssignments()

	// Clear the saved assignment
	savesetting(assignment_setting_key, "");
	reenter ASSIGNMENT_SELECTION_FORM;

end;


// Check that no person, other than someone with code ignoreStaffCode, has the name in staffName
function VerifyStaffNameIsUnique(string staffName, string ignoreStaffCode)

	numeric nameIsUsed = countcases(PSC_STAFF_DICT where S_STAFF_CODE <> ignoreStaffCode and S_STAFF_NAME = staffName);

	if ignoreStaffCode <> "" then
		// Load the staff entry that was in memory
		loadcase(PSC_STAFF_DICT, ignoreStaffCode);
	endif;

	if nameIsUsed then
		errmsg("The name %s is used by another staff member", strip(staffName));
		reenter;
	endif;

end;


function ValidatePINCode(code)

	if code < 1000 then
		errmsg("The PIN code must be four digits and cannot start with 0");
		reenter;
	endif;

	if( errmsg("Confirm that %04d is the correct code", code)
		select("Correct", continue,"Incorrect", continue) ) = 2 then
		reenter;
	endif;

end;


// ------------------
// ------------------ Program code
// ------------------


PROC MENU_FF

preproc

	// For testing on Windows, make the value sets bigger
	setfont(valuesets, "Calibri", 20);


PROC M_LOGIN

preproc

	// This is the first field and preprocs are only executed when moving forward. Therefore, this is the first login
	// after application startup. Try to log in automatically.
	numeric automaticLoginOnStartup = 1;

onfocus

	if automaticLoginOnStartup then

		// The application was just started. Retreive previous user.
		S_STAFF_CODE = loadsetting(login_setting_key);

		if loadcase(PSC_STAFF_DICT, S_STAFF_CODE) and S_PIN_CODE <> notappl then
			// Previous user was found and PIN is defined, so login automatically for convenience
			M_LOGIN = S_STAFF_CODE;
			M_PIN_CODE_CONFIRMATION = S_PIN_CODE;
			advance to ASSIGNMENT_SELECTION_FORM;
		endif;

	endif;

	ValueSet string login_vs;

	forcase PSC_STAFF_DICT do
		login_vs.add(S_STAFF_NAME, key(PSC_STAFF_DICT));
	endfor;

	login_vs.add("Update programs from headquarters", "1");
	login_vs.add("Update programs from supervisor", "2");
	login_vs.add("Begin work as a supervisor", "3");

	setvalueset(M_LOGIN, login_vs);

	// Clear the login
	M_LOGIN = "";
	M_PIN_CODE_CONFIRMATION = notappl;

	// Useful to see if the current application is being used
	numeric publishYYYYMMDD = int(publishdate() / 1000000);
	numeric publishDD = publishYYYYMMDD % 100; // % = remainder (extract the last two digits)
	numeric publishMM = int(publishYYYYMMDD / 100) % 100;
	numeric publishYYYY = int(publishYYYYMMDD / 10000);
	capi_publish_date = maketext("%d %s %d", publishDD, months(publishMM), publishYYYY);

postproc

	// Do not automtically login on further attempts. If user tries to log in again, it is because they choose to
	// switch users, so allow them to select their staff name.
	automaticLoginOnStartup = 0;

	if M_LOGIN = "1" then
		SyncWithHQ(app_sync);
		reenter;

	elseif M_LOGIN = "2" then
		StartServer();
		reenter;

	elseif M_LOGIN = "3" then
		skip to SUPERVISOR_CREATION_FORM;

	elseif loadcase(PSC_STAFF_DICT,M_LOGIN) then
		capi_staff_name = LookupStaffName(M_LOGIN);

	endif;


PROC M_PIN_CODE_CONFIRMATION

preproc

	setproperty(M_PIN_CODE_CONFIRMATION, "Protected", "No");

postproc

	if S_PIN_CODE = notappl then
		// Creating a new PIN code
		ValidatePINCode(M_PIN_CODE_CONFIRMATION);

		S_PIN_CODE = M_PIN_CODE_CONFIRMATION;
		S_DEVICE_ID = getdeviceid();
		writecase(PSC_STAFF_DICT);

	elseif M_PIN_CODE_CONFIRMATION <> S_PIN_CODE then
		// Validating an existing PIN code
		errmsg("Invalid PIN code");
		reenter;

	endif;

	savesetting(login_setting_key, S_STAFF_CODE);

	setproperty(M_PIN_CODE_CONFIRMATION, "Protected", "Yes");

	skip to ASSIGNMENT_SELECTION_FORM;


PROC SUPERVISOR_CREATION_FORM

preproc

	setproperty(SUPERVISOR_CREATION_FORM, "Protected", "No");

postproc

	setproperty(SUPERVISOR_CREATION_FORM, "Protected", "Yes");


PROC M_SUPERVISOR_ACCESS_PASSWORD

preproc

	// Clear the values in case multiple supervisors setup accounts
	M_SUPERVISOR_ACCESS_PASSWORD = notappl;
	M_SUPERVISOR_NAME = "";
	M_SUPERVISOR_PIN_CODE = notappl;

postproc

	if M_SUPERVISOR_ACCESS_PASSWORD <> supervisor_password then
		errmsg("Invalid password. You cannot proceed as a supervisor.");
		reenter;
	endif;


PROC M_SUPERVISOR_NAME

	if M_SUPERVISOR_NAME = "" then
		errmsg("You cannot enter a blank name.");
		reenter;
	endif;

	VerifyStaffNameIsUnique(M_SUPERVISOR_NAME, "");


PROC M_SUPERVISOR_PIN_CODE

postproc

	ValidatePINCode(M_SUPERVISOR_PIN_CODE);

	// Update the staff file (save the data about this supervisor)
	clear(PSC_STAFF_DICT);
	S_STAFF_CODE = uuid(); // Create unique identifier for supervisor
	S_STAFF_NAME = M_SUPERVISOR_NAME;
	S_PIN_CODE = M_SUPERVISOR_PIN_CODE;;
	S_DEVICE_ID = getdeviceid();
	S_SUPERVISOR_STAFF_CODE = "";
	S_TIME_CREATED_ACCOUNT = timestamp();
	setcaselabel(PSC_STAFF_DICT, strip(S_STAFF_NAME));

	writecase(PSC_STAFF_DICT);

	// Set the login to the supervisor
	M_LOGIN = S_STAFF_CODE;
	savesetting(login_setting_key, M_LOGIN);

	capi_staff_name = LookupStaffName(M_LOGIN);


PROC M_ASSIGNMENT_SELECTION

preproc

	// User is moving forward, this could be the first login after application startup. Try to log in automatically.
	numeric automaticAssignmentSelectionOnStartup = 1;

onfocus

	if automaticAssignmentSelectionOnStartup then

		// Retreive previous user. If user got here by selecting "Switch users" the assignment_setting_key will have
		// been set to blank. The previous assignment will only be valid on first login after application startup.
		string previousAssignment = loadsetting(assignment_setting_key);

		if loadcase(PSC_ASSIGNMENTS_DICT, previousAssignment) then

			// Previous assignment was found, so automatically select assignment for convenience
			if A_STAFF_CODE = M_LOGIN then
				M_ASSIGNMENT_SELECTION = key(PSC_ASSIGNMENTS_DICT);
				advance to MAIN_MENU_FORM;
			endif;

		endif;

	endif;

	numeric numberInterviewerAssignments = 0;

	ValueSet string assignments_vs;

	forcase PSC_ASSIGNMENTS_DICT where A_STAFF_CODE = M_LOGIN do

		string label = maketext("%s (%v) / %s (%v)",
			LookupProvinceName(A_PROVINCE), A_PROVINCE,
			LookupDistrictName(A_PROVINCE, A_DISTRICT), A_DISTRICT);

		if A_EA = notappl then
			label = maketext("Supervise: %s", label);

		else
			label = maketext("Interview: %s / %s", label, LookupEAName(A_EA));

		endif;

		assignments_vs.add(label, key(PSC_ASSIGNMENTS_DICT));

		if A_ROLE = 1 then
			inc(numberInterviewerAssignments);
		endif;

	endfor;

	if S_SUPERVISOR_STAFF_CODE = "" then
		assignments_vs.add("Select census area to supervise", "1");
		capi_staff_role = "Supervisor";

		assignments_vs.add("Update programs from headquarters", "2");

	else
		capi_staff_role = "Interviewer";

		if numberInterviewerAssignments = 0 then
			errmsg("Your supervisor has not yet assigned you any EAs. Transfer data with the supervisor once they have made an assignment");
		endif;

		assignments_vs.add("Update programs from supervisor", "3");

	endif;

	assignments_vs.add("Switch users", "4");

	setvalueset(M_ASSIGNMENT_SELECTION, assignments_vs);

	M_ASSIGNMENT_SELECTION = "";

postproc

	// Do not automtically login on further attempts. If user tries to log in again, it is because they choose to
	// switch users, so allow them to select their assignment.
	automaticAssignmentSelectionOnStartup = 0;

	if M_ASSIGNMENT_SELECTION = "1" then

		// Select census area to supervise
		if countcases(PSC_GEOCODES_DICT) = 0 then
			errmsg("You do not have a valid list of geocodes. Transfer data with headquarters to get this list.");
			reenter;
		endif;

		skip to M_SUPERVISOR_PROVINCE;

	elseif M_ASSIGNMENT_SELECTION = "2" then
		SyncWithHQ(app_sync);
		reenter;

	elseif M_ASSIGNMENT_SELECTION = "3" then
		StartServer();
		reenter;

	elseif M_ASSIGNMENT_SELECTION = "4" then
		SwitchUsers();

	elseif loadcase(PSC_ASSIGNMENTS_DICT, M_ASSIGNMENT_SELECTION) then

		// Save the assignment for the next time the menu application is loaded
		savesetting(assignment_setting_key, M_ASSIGNMENT_SELECTION);

		M_CURRENT_PROVINCE = A_PROVINCE;
		M_CURRENT_DISTRICT = A_DISTRICT;

		capi_province_name = LookupProvinceName(M_CURRENT_PROVINCE);
		capi_district_name = LookupDistrictName(M_CURRENT_PROVINCE, M_CURRENT_DISTRICT);
		capi_ea_name = LookupEAName(A_EA);

		if A_ROLE = 1 then
			skip to M_INTERVIEWER_MENU;

		else
			skip to M_SUPERVISOR_MENU;

		endif;

	endif;


PROC M_SUPERVISOR_PROVINCE

preproc

	ValueSet province_vs;

	forcase PSC_GEOCODES_DICT where G_AREA_LEVEL = 1 do
		// Prepare value sets for provinces
		province_vs.add(G_AREA_NAME, G_PROVINCE);
	endfor;

	setvalueset(M_SUPERVISOR_PROVINCE, province_vs);

	M_SUPERVISOR_PROVINCE = notappl;


PROC M_SUPERVISOR_DISTRICT

preproc

	capi_province_name = LookupProvinceName(M_SUPERVISOR_PROVINCE);

	ValueSet district_vs;

	forcase PSC_GEOCODES_DICT where G_AREA_LEVEL = 2 and G_PROVINCE = M_SUPERVISOR_PROVINCE do
		// Prepare value sets for districts that are within the previously selected province
		district_vs.add(G_AREA_NAME, G_DISTRICT);
	endfor;

	setvalueset(M_SUPERVISOR_DISTRICT, district_vs);

	M_SUPERVISOR_DISTRICT = notappl;

postproc

	if countcases(PSC_ASSIGNMENTS_DICT where
		A_PROVINCE = M_SUPERVISOR_PROVINCE and
		A_DISTRICT = M_SUPERVISOR_DISTRICT and
		A_STAFF_CODE = M_LOGIN and
		A_ROLE = 2) <> 0 then

		errmsg("You are already assigned to this district.");
		reenter;

	endif;

	// Update the assignments file
	clear(PSC_ASSIGNMENTS_DICT);

	A_PROVINCE = M_SUPERVISOR_PROVINCE;
	A_DISTRICT = M_SUPERVISOR_DISTRICT;
	A_STAFF_CODE = M_LOGIN;
	A_ROLE = 2;
	A_DATE_ASSIGNED = timestamp();

	writecase(PSC_ASSIGNMENTS_DICT);

	// Show the newly saved assignment along with any other assignments the user might have
	reenter M_ASSIGNMENT_SELECTION;


PROC M_SUPERVISOR_MENU

onfocus

	capi_ea_assigned_count = 0;
	numeric previousEA = notappl;

	forcase PSC_ASSIGNMENTS_DICT where
		A_PROVINCE = M_CURRENT_PROVINCE and
		A_DISTRICT = M_CURRENT_DISTRICT do

		// Only count assigned EAs once
		if previousEA <> A_EA then
			inc(capi_ea_assigned_count);
			previousEA = A_EA;
		endif;

	endfor;

	M_SUPERVISOR_MENU = notappl;

postproc

	if M_SUPERVISOR_MENU = 1 then
		skip to M_MANAGE_STAFF;

	elseif M_SUPERVISOR_MENU = 2 then
		skip to EA_ASSIGNMENT_FORM;

	elseif M_SUPERVISOR_MENU = 3 then
		InitInterviewerStatusRecord();
		INTERVIEWER_STATUS_REPORT.view();
		reenter;

	elseif M_SUPERVISOR_MENU = 4 then
		SyncWithInterviewer();
		reenter;

	elseif M_SUPERVISOR_MENU = 5 then
		SyncWithHQ(full_sync);
		reenter;

	elseif M_SUPERVISOR_MENU = 8 then
		SwitchAssignments();

	elseif M_SUPERVISOR_MENU = 9 then
		SwitchUsers();

	endif;


PROC M_INTERVIEWER_MENU

onfocus

	ValueSet string interviewer_menu_vs;

	interviewer_menu_vs.add("Add new household", "1");

	capi_household_complete_count = 0;
	capi_household_partial_count = 0;

	numeric totalHouseholds = 0;
	numeric autoIncrementHouseholdNumber = 0;

	forcase PSC_HOUSEHOLD_DICT where
		HH_PROVINCE = A_PROVINCE and
		HH_DISTRICT = A_DISTRICT and
		HH_EA = A_EA and
		HH_SEGMENT = A_SEGMENT do

		inc(totalHouseholds);

		if HH_NUMBER > autoIncrementHouseholdNumber then
			autoIncrementHouseholdNumber = HH_NUMBER;
		endif;

		if ispartial(PSC_HOUSEHOLD_DICT) then
			inc(capi_household_partial_count);
			interviewer_menu_vs.add("Continue working on household " + LookupDetailedHouseholdName(), key(PSC_HOUSEHOLD_DICT));

		else
			inc(capi_household_complete_count);

		endif;

	endfor;

	interviewer_menu_vs.add(maketext("View all %d households", totalHouseholds), "2");
	interviewer_menu_vs.add("Transfer data with supervisor", "7");
	interviewer_menu_vs.add("Change my assignment", "8");
	interviewer_menu_vs.add("Switch users", "9");

	setvalueset(M_INTERVIEWER_MENU, interviewer_menu_vs);

	M_INTERVIEWER_MENU = "";

postproc

	if M_INTERVIEWER_MENU = "1" then
		// Initialize the case IDs
		HH_PROVINCE = A_PROVINCE;
		HH_DISTRICT = A_DISTRICT;
		HH_EA = A_EA;
		HH_SEGMENT = A_SEGMENT;
		HH_NUMBER = autoIncrementHouseholdNumber + 1;

		errmsg("Are you sure that you want to add a household numbered %v%v?", HH_SEGMENT, HH_NUMBER)
		select("Yes", continue, "No", M_INTERVIEWER_MENU);

		LaunchHouseholdProgram();

	elseif M_INTERVIEWER_MENU = "2" then

		if totalHouseholds = 0 then
			errmsg("There are no households to view");
			reenter;

		else
			skip to M_VIEW_ALL_HOUSEHOLDS;

		endif;

	elseif M_INTERVIEWER_MENU = "7" then
		StartServer();
		reenter;

	elseif M_INTERVIEWER_MENU = "8" then
		SwitchAssignments();

	elseif M_INTERVIEWER_MENU = "9" then
		SwitchUsers();

	else
		loadcase(PSC_HOUSEHOLD_DICT, M_INTERVIEWER_MENU);
		LaunchHouseholdProgram();

	endif;


PROC M_VIEW_ALL_HOUSEHOLDS

onfocus

	ValueSet string households_vs;

	forcase PSC_HOUSEHOLD_DICT where
		HH_PROVINCE = A_PROVINCE and
		HH_DISTRICT = A_DISTRICT and
		HH_EA = A_EA and
		HH_SEGMENT = A_SEGMENT do

		households_vs.add("Continue working on household " + LookupDetailedHouseholdName(), key(PSC_HOUSEHOLD_DICT));

	endfor;

	setvalueset(M_VIEW_ALL_HOUSEHOLDS, households_vs);
	M_VIEW_ALL_HOUSEHOLDS = "";

postproc

	if loadcase(PSC_HOUSEHOLD_DICT, M_VIEW_ALL_HOUSEHOLDS) then
		LaunchHouseholdProgram();
	endif;


PROC M_MANAGE_STAFF

onfocus

	ValueSet string staff_vs;

	// First display the supervisor
	staff_vs.add(LookupStaffName(M_LOGIN) + " (Supervisor)", M_LOGIN);

	// and then the interviewers
	forcase PSC_STAFF_DICT do

		if key(PSC_STAFF_DICT) <> M_LOGIN then
			staff_vs.add(S_STAFF_NAME, key(PSC_STAFF_DICT));
		endif;

	endfor;

	staff_vs.add("Add new interviewer", "1");

	setvalueset(M_MANAGE_STAFF, staff_vs);

	M_MANAGE_STAFF = "";

postproc

	if M_MANAGE_STAFF = "1" then
		skip to M_MANAGE_STAFF_NAME;

	elseif loadcase(PSC_STAFF_DICT, M_MANAGE_STAFF) then
		skip to M_MANAGE_STAFF_MEMBER;

	endif;


PROC M_MANAGE_STAFF_MEMBER

onfocus

	capi_manage_staff_name = LookupStaffName(M_MANAGE_STAFF);

	M_MANAGE_STAFF_MEMBER = notappl;

postproc

	if M_MANAGE_STAFF_MEMBER = 1 then

		// Prefill in the staff member's name
		M_MANAGE_STAFF_NAME = S_STAFF_NAME;
		skip to M_MANAGE_STAFF_NAME;

	elseif M_MANAGE_STAFF_MEMBER = 2 then

		if S_PIN_CODE = notappl then
			errmsg("Staff PIN code of %s is not yet set", capi_manage_staff_name);

		else
			errmsg("Staff PIN code of %s is %v", capi_manage_staff_name, S_PIN_CODE);

		endif;

		reenter;

	elseif M_MANAGE_STAFF_MEMBER = 3 then

		S_PIN_CODE = notappl;
		writecase(PSC_STAFF_DICT);

		errmsg("Staff PIN code of %s has been reset", capi_manage_staff_name);

		if S_STAFF_CODE = M_LOGIN then
			// Supervisor changed their code, log out so that they can log in and reset it
			SwitchUsers();

		else
			reenter;

		endif;

	endif;


PROC M_MANAGE_STAFF_NAME

onfocus

	if M_MANAGE_STAFF = "1" then
		M_MANAGE_STAFF_NAME = "";
	endif;

postproc

	if M_MANAGE_STAFF_NAME = "" then
		errmsg("You cannot enter a blank name.");
		reenter;

	elseif M_MANAGE_STAFF = "1" then
		VerifyStaffNameIsUnique(M_MANAGE_STAFF_NAME, "");

		// Add a new interviewer
		clear(PSC_STAFF_DICT);

		S_STAFF_CODE = uuid(); // Create unique identifier for interviewer
		S_STAFF_NAME = M_MANAGE_STAFF_NAME;
		S_SUPERVISOR_STAFF_CODE = M_LOGIN;
		S_TIME_CREATED_ACCOUNT = timestamp();
		setcaselabel(PSC_STAFF_DICT, strip(S_STAFF_NAME));

		writecase(PSC_STAFF_DICT);

		errmsg("%s successfully added as an interviewer", LookupStaffName(S_STAFF_CODE));

		reenter M_MANAGE_STAFF;

	else
		// Modify the name
		string oldName = LookupStaffName(S_STAFF_CODE);

		if M_MANAGE_STAFF_NAME = oldName then
			errmsg("The name is the same as before and has not been changed");

		else
			VerifyStaffNameIsUnique(M_MANAGE_STAFF_NAME, M_MANAGE_STAFF);

			S_STAFF_NAME = M_MANAGE_STAFF_NAME;
			setcaselabel(PSC_STAFF_DICT, strip(S_STAFF_NAME));
			writecase(PSC_STAFF_DICT);

			errmsg("%s successfully renamed to %s", oldName, LookupStaffName(S_STAFF_CODE));

		endif;

		reenter M_MANAGE_STAFF_MEMBER;

	endif;


PROC M_INTERVIEWER_CODE

onfocus

	ValueSet string interviewer_code_vs;

	forcase PSC_STAFF_DICT where M_LOGIN <> S_STAFF_CODE do
		// Not supervisor
		interviewer_code_vs.add(S_STAFF_NAME, key(PSC_STAFF_DICT));
	endfor;

	if interviewer_code_vs.length() = 0 then
		errmsg("You must add interviewers before you can make any assignments");
		reenter M_SUPERVISOR_MENU;
	endif;

	setvalueset(M_INTERVIEWER_CODE, interviewer_code_vs);

	M_INTERVIEWER_CODE = "";

postproc

	loadcase(PSC_STAFF_DICT, M_INTERVIEWER_CODE);

	capi_manage_staff_name = LookupStaffName(M_INTERVIEWER_CODE);

	// Check if the interviewer already has an assignment
	numeric numberAssignmentsForInterviewer = countcases(PSC_ASSIGNMENTS_DICT
		where A_STAFF_CODE = M_INTERVIEWER_CODE and A_ROLE = 1);

	if numberAssignmentsForInterviewer > 0 then
		errmsg("%s already has %d assignment. Are you sure you want to add another?",
			LookupStaffName(M_INTERVIEWER_CODE), numberAssignmentsForInterviewer)
			select("Yes", continue, "No", M_INTERVIEWER_CODE);
	endif;


PROC M_INTERVIEWER_EA

onfocus

	ValueSet interviewer_ea_vs;

	// Display all enumerations areas that are within the current province and district
	forcase PSC_GEOCODES_DICT where G_AREA_LEVEL = 3 and
		G_PROVINCE = M_CURRENT_PROVINCE and G_DISTRICT = M_CURRENT_DISTRICT do

		string eaAssignedNames;

		forcase PSC_ASSIGNMENTS_DICT(startswith, maketext("%v%v%v", G_PROVINCE, G_DISTRICT
			, G_EA)) do

				if A_ROLE = 1 then
					// Only interviewers
					if length(eaAssignedNames) > 0 then
						// Use a comma to separate multiple names
						eaAssignedNames = eaAssignedNames + ", ";
					endif;

					eaAssignedNames = eaAssignedNames + LookupStaffName(A_STAFF_CODE);

				endif;
		
		enddo;

		if length(eaAssignedNames) > 0 then
			eaAssignedNames = " (" + eaAssignedNames + ")";
		endif;

		// Display EA codes
		interviewer_ea_vs.add(LookupEAName(G_EA) + eaAssignedNames, G_EA);

	endfor;

	setvalueset(M_INTERVIEWER_EA, interviewer_ea_vs);

	// Clear EA assignment
	M_INTERVIEWER_EA = notappl;

postproc

	numeric numberExistingAssignments = 0;

	forcase PSC_ASSIGNMENTS_DICT where
		A_PROVINCE = M_CURRENT_PROVINCE and
		A_DISTRICT = M_CURRENT_DISTRICT and
		A_EA = M_INTERVIEWER_EA and
		A_ROLE = 1 do

		inc(numberExistingAssignments);

		if A_STAFF_CODE = M_INTERVIEWER_CODE then
			errmsg("%s has already been assigned to %s", LookupEAName(M_INTERVIEWER_EA), LookupStaffName(M_INTERVIEWER_CODE));
			reenter;
		endif;

	endfor;

	if numberExistingAssignments >= 1 then
		errmsg("Are you sure you want to assign %s to more than one interviewer?", LookupEAName(M_INTERVIEWER_EA))
		select("Yes", continue, "No", M_INTERVIEWER_EA);
	endif;

	errmsg("Are you sure you want to assign %s to %s?", LookupEAName(M_INTERVIEWER_EA), LookupStaffName(M_INTERVIEWER_CODE))
	select("Yes", continue, "No", M_INTERVIEWER_EA);

	clear(PSC_ASSIGNMENTS_DICT);

	A_PROVINCE = M_CURRENT_PROVINCE;
	A_DISTRICT = M_CURRENT_DISTRICT;
	A_EA = M_INTERVIEWER_EA;
	A_STAFF_CODE = M_INTERVIEWER_CODE;
	A_ROLE = 1;
	A_SEGMENT = segment_alphabet[( numberExistingAssignments + 1 ):1];

	A_DATE_ASSIGNED = timestamp();

	writecase(PSC_ASSIGNMENTS_DICT);

	errmsg("%s successfully assigned to %s", LookupEAName(A_EA), LookupStaffName(M_INTERVIEWER_CODE));

	reenter M_SUPERVISOR_MENU;
