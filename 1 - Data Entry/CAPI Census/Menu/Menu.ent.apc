PROC GLOBAL


// ------------------
// ------------------ Global variables
// ------------------


numeric supervisor_password = 1234;
string login_interview_setting_key = "PSC Interview Login";
string login_supervisor_setting_key = "PSC Supervisor Login";
string assignment_setting_key = "PSC Assignment";
string segment_alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
List string months = "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec";


// ------------------
// ------------------ CAPI text variables
// ------------------


string capi_staff_name;	// Name of the person who logged into the system
string capi_manage_staff_name; // Various names of interviewers used throughout the system
string capi_province_name;
string capi_district_name;
string capi_ea_name;
numeric capi_ea_assigned_count;
numeric capi_household_complete_count;
numeric capi_household_partial_count;


// ------------------
// ------------------ Function to log in and log out
// ------------------


function Logout()
	savesetting(login_interview_setting_key,"");
	savesetting(login_supervisor_setting_key,"");
	savesetting(assignment_setting_key,"");
	stop(1);
end;


function GetLoginCredentials()

	// Is the staff member logged in (could be supervisor or interviewer)?
	string saved_interviewer_staff_code = loadsetting(login_interview_setting_key);
	string saved_supervisor_staff_code = loadsetting(login_supervisor_setting_key);
	string saved_staff_code;
	numeric isInterviewer;
	if saved_interviewer_staff_code <> "" then
		saved_staff_code = saved_interviewer_staff_code;
		isInterviewer = true;
	elseif saved_supervisor_staff_code <> "" then
		saved_staff_code = saved_supervisor_staff_code;
		isInterviewer = false;
	else
		errmsg("Error login credential for staff code is invalid.");
		stop(1);
	endif;	
	
	string saved_assignment_code = loadsetting(assignment_setting_key);
	if saved_assignment_code = "" then
		errmsg("Error login credential for assignment is invalid.");
		stop(1);
	endif;
	
	M_CURRENT_STAFF_CODE = saved_staff_code;
	M_CURRENT_PROVINCE = tonumber(saved_assignment_code[1:2]);
	M_CURRENT_DISTRICT = tonumber(saved_assignment_code[3:2]);
	if isInterviewer then
		M_CURRENT_EA = tonumber(saved_assignment_code[5:3]);
	else
		M_CURRENT_EA = notappl;
	endif;
	
	// verify staff code
	if not loadcase(PSC_STAFF_DICT, saved_staff_code) then
		errmsg("Error could not load staff.");
		stop(1);
	endif;
	
	A_ROLE = 2;
	if S_SUPERVISOR_STAFF_CODE <> "" then
		// This staff member has a supervisor, so this staff member is an interviewer.
		A_ROLE = 1;
	endif;
	
	// verify staff is assigned this assignment
	if not loadcase(PSC_ASSIGNMENTS_DICT, M_CURRENT_PROVINCE, M_CURRENT_DISTRICT, M_CURRENT_EA,
		M_CURRENT_STAFF_CODE, A_ROLE) then
		
		errmsg("Error could not load assignment.");
		stop(1);
	endif;
		
end;


// ------------------
// ------------------ Function to override the back button on Android (and the stop button on Windows)
// ------------------


// The highlighted function determines whether the user has passed through the supervisor or interviewer menu.
// If the menu has been passed through, the back button on Android (and the stop button on Windows) will reenter
// the menu when pressed. Otherwise, the button will exit the application.
function OnStop()

	if highlighted(M_SUPERVISOR_MENU) then
		reenter M_SUPERVISOR_MENU;

	elseif highlighted(M_INTERVIEWER_MENU) then
		reenter M_INTERVIEWER_MENU;

	else
		// Quit the application. Main menu has not been entered
		stop(1);

	endif;

end;


// ------------------
// ------------------ Functions to simplify looking up geographic names
// ------------------


function string LookupDetailedHouseholdName()

	string detailedName = maketext("%v%v", HH_SEGMENT, HH_NUMBER);

	if count(HH_NAME) >= 1 and HH_NAME(1) <> "" then
		detailedName = detailedName + maketext(" - %v", strip(HH_NAME(1)));
	endif;

	LookupDetailedHouseholdName = detailedName;

end;


// ------------------
// ------------------ PFF functions
// ------------------


function LaunchHouseholdProgram()

	// Load the default settings from the existing household PFF
	Pff household_pff;
	household_pff.load("../Household/Household.pff");

	// Set the Key to indicate what household to modify/add
	household_pff.setProperty("Key",
		maketext("%v%v%v%v%v", HH_PROVINCE, HH_DISTRICT, HH_EA, HH_SEGMENT, HH_NUMBER));

	// Set some other metadata
	household_pff.setProperty("ProvinceName", LookupProvinceName(HH_PROVINCE));
	household_pff.setProperty("DistrictName", LookupDistrictName(HH_PROVINCE,HH_DISTRICT));
	household_pff.setProperty("EAName", LookupEAName(HH_EA));
	household_pff.setProperty("InterviewerCode", M_CURRENT_STAFF_CODE);
	household_pff.setProperty("SupervisorCode", S_SUPERVISOR_STAFF_CODE);
	household_pff.setProperty("StaffName", LookupStaffName(M_CURRENT_STAFF_CODE));

	// Run the household application
	household_pff.exec();

end;


// ------------------
// ------------------ Report functions
// ------------------


function InitInterviewerStatusRecord()
	
	numeric ws_counter = 0;
	
	// Loop through all interviewers that are supervised by the currently logged in supervisor
	forcase PSC_STAFF_DICT where S_SUPERVISOR_STAFF_CODE = M_CURRENT_STAFF_CODE do
		
		inc(ws_counter);
		
		if ws_counter > count(INTERVIEWER_STATUS_RECORD) then
			insert(INTERVIEWER_STATUS_RECORD, ws_counter);
		endif;
		
		// All variables in occurrence of INTERVIEWER_STATUS_RECORD record
		ISR_INTERVIEWER_NAME(ws_counter) = S_STAFF_NAME;
		ISR_COMPLETE_HOUSEHOLDS(ws_counter) = 0;
		ISR_PARTIAL_HOUSEHOLDS(ws_counter) = 0;
		ISR_LAST_INTERVIEW(ws_counter) = 0;

		forcase PSC_ASSIGNMENTS_DICT where A_STAFF_CODE = S_STAFF_CODE do
		
			forcase PSC_HOUSEHOLD_DICT where HH_PROVINCE = A_PROVINCE
				and HH_DISTRICT = A_DISTRICT and HH_EA = A_EA
				and HH_SEGMENT = A_SEGMENT do
		
				if ispartial(PSC_HOUSEHOLD_DICT) then
					// Sum partial households
					inc(ISR_PARTIAL_HOUSEHOLDS(ws_counter));
				else
					// Sum complete households
					inc(ISR_COMPLETE_HOUSEHOLDS(ws_counter));
				endif;
				
				if ISR_LAST_INTERVIEW(ws_counter) < HH_END_INTERVIEW_TIME then
					// Assign the last interview time and date
					ISR_LAST_INTERVIEW(ws_counter) = HH_END_INTERVIEW_TIME;
				endif;
				
			endfor;
			
		endfor;
		
	endfor;
	
	if ws_counter < count(INTERVIEWER_STATUS_RECORD) then
		delete(INTERVIEWER_STATUS_RECORD, ws_counter + 1, count(INTERVIEWER_STATUS_RECORD));		
	endif;
	
end;


// ------------------
// ------------------ Miscellaneous functions
// ------------------

// Check that no person, other than someone with code ignoreStaffCode, has the name in staffName
function VerifyStaffNameIsUnique(string staffName, string ignoreStaffCode)

	numeric nameIsUsed = countcases(PSC_STAFF_DICT where S_STAFF_CODE <> ignoreStaffCode and S_STAFF_NAME = staffName);

	if ignoreStaffCode <> "" then
		// Load the staff entry that was in memory
		loadcase(PSC_STAFF_DICT, ignoreStaffCode);
	endif;

	if nameIsUsed then
		errmsg("The name %s is used by another staff member", strip(staffName));
		reenter;
	endif;

end;


// ------------------
// ------------------ Program code
// ------------------


PROC MENU_FF

preproc

	// For testing on Windows, make the value sets bigger
	setfont(valuesets, "Calibri", 20);

PROC M_VERIFY_CREDENTIALS

onfocus

	M_VERIFY_CREDENTIALS = 1;
	protect(M_VERIFY_CREDENTIALS, true);
	GetLoginCredentials();
	
	capi_staff_name = LookupStaffName(M_CURRENT_STAFF_CODE);
	capi_province_name = LookupProvinceName(M_CURRENT_PROVINCE);
	capi_district_name = LookupDistrictName(M_CURRENT_PROVINCE, M_CURRENT_DISTRICT);
	capi_ea_name = LookupEAName(M_CURRENT_EA);

	if A_ROLE = 1 then
		skip to M_INTERVIEWER_MENU;
	elseif A_ROLE = 2 then
		skip to M_SUPERVISOR_MENU;
	else
		errmsg("Error invalid role in assignment.");
		stop(1);
	endif;


PROC M_SUPERVISOR_MENU

onfocus

	capi_ea_assigned_count = 0;
	numeric previousEA = notappl;

	forcase PSC_ASSIGNMENTS_DICT where
		A_PROVINCE = M_CURRENT_PROVINCE and
		A_DISTRICT = M_CURRENT_DISTRICT do

		// Only count assigned EAs once
		if previousEA <> A_EA then
			inc(capi_ea_assigned_count);
			previousEA = A_EA;
		endif;

	endfor;

	M_SUPERVISOR_MENU = notappl;

postproc

	if M_SUPERVISOR_MENU = 1 then
		skip to M_MANAGE_STAFF;

	elseif M_SUPERVISOR_MENU = 2 then
		skip to EA_ASSIGNMENT_FORM;

	elseif M_SUPERVISOR_MENU = 3 then
		InitInterviewerStatusRecord();
		INTERVIEWER_STATUS_REPORT.view();
		reenter;

	elseif M_SUPERVISOR_MENU = 4 then
		SyncWithInterviewer();
		reenter;

	elseif M_SUPERVISOR_MENU = 5 then
		SyncWithHQ(full_sync);
		reenter;

	elseif M_SUPERVISOR_MENU = 9 then
		Logout();

	endif;


PROC M_INTERVIEWER_MENU

onfocus

	ValueSet string interviewer_menu_vs;

	interviewer_menu_vs.add("Add new household", "1");

	capi_household_complete_count = 0;
	capi_household_partial_count = 0;

	numeric totalHouseholds = 0;
	numeric autoIncrementHouseholdNumber = 0;

	forcase PSC_HOUSEHOLD_DICT where
		HH_PROVINCE = A_PROVINCE and
		HH_DISTRICT = A_DISTRICT and
		HH_EA = A_EA and
		HH_SEGMENT = A_SEGMENT do

		inc(totalHouseholds);

		if HH_NUMBER > autoIncrementHouseholdNumber then
			autoIncrementHouseholdNumber = HH_NUMBER;
		endif;

		if ispartial(PSC_HOUSEHOLD_DICT) then
			inc(capi_household_partial_count);
			interviewer_menu_vs.add("Continue working on household " + LookupDetailedHouseholdName(), key(PSC_HOUSEHOLD_DICT));

		else
			inc(capi_household_complete_count);

		endif;

	endfor;

	interviewer_menu_vs.add(maketext("View all %d households", totalHouseholds), "2");
	interviewer_menu_vs.add("Transfer data with supervisor", "7");
	interviewer_menu_vs.add("Logout", "9");

	setvalueset(M_INTERVIEWER_MENU, interviewer_menu_vs);

	M_INTERVIEWER_MENU = "";

postproc

	if M_INTERVIEWER_MENU = "1" then
		// Initialize the case IDs
		HH_PROVINCE = A_PROVINCE;
		HH_DISTRICT = A_DISTRICT;
		HH_EA = A_EA;
		HH_SEGMENT = A_SEGMENT;
		HH_NUMBER = autoIncrementHouseholdNumber + 1;

		errmsg("Are you sure that you want to add a household numbered %v%v?", HH_SEGMENT, HH_NUMBER)
		select("Yes", continue, "No", M_INTERVIEWER_MENU);

		LaunchHouseholdProgram();

	elseif M_INTERVIEWER_MENU = "2" then

		if totalHouseholds = 0 then
			errmsg("There are no households to view");
			reenter;

		else
			skip to M_VIEW_ALL_HOUSEHOLDS;

		endif;

	elseif M_INTERVIEWER_MENU = "7" then
		StartServer();
		reenter;

	elseif M_INTERVIEWER_MENU = "9" then
		Logout();

	else
		loadcase(PSC_HOUSEHOLD_DICT, M_INTERVIEWER_MENU);
		LaunchHouseholdProgram();

	endif;


PROC M_VIEW_ALL_HOUSEHOLDS

onfocus

	ValueSet string households_vs;

	forcase PSC_HOUSEHOLD_DICT where
		HH_PROVINCE = A_PROVINCE and
		HH_DISTRICT = A_DISTRICT and
		HH_EA = A_EA and
		HH_SEGMENT = A_SEGMENT do

		households_vs.add("Continue working on household " + LookupDetailedHouseholdName(), key(PSC_HOUSEHOLD_DICT));

	endfor;

	setvalueset(M_VIEW_ALL_HOUSEHOLDS, households_vs);
	M_VIEW_ALL_HOUSEHOLDS = "";

postproc

	if loadcase(PSC_HOUSEHOLD_DICT, M_VIEW_ALL_HOUSEHOLDS) then
		LaunchHouseholdProgram();
	endif;


PROC M_MANAGE_STAFF

onfocus

	ValueSet string staff_vs;

	// First display the supervisor
	staff_vs.add(LookupStaffName(M_CURRENT_STAFF_CODE) + " (Supervisor)", M_CURRENT_STAFF_CODE);

	// and then the interviewers
	forcase PSC_STAFF_DICT do

		if key(PSC_STAFF_DICT) <> M_CURRENT_STAFF_CODE then
			staff_vs.add(S_STAFF_NAME, key(PSC_STAFF_DICT));
		endif;

	endfor;

	staff_vs.add("Add new interviewer", "1");

	setvalueset(M_MANAGE_STAFF, staff_vs);

	M_MANAGE_STAFF = "";

postproc

	if M_MANAGE_STAFF = "1" then
		skip to M_MANAGE_STAFF_NAME;

	elseif loadcase(PSC_STAFF_DICT, M_MANAGE_STAFF) then
		skip to M_MANAGE_STAFF_MEMBER;

	endif;


PROC M_MANAGE_STAFF_MEMBER

onfocus

	capi_manage_staff_name = LookupStaffName(M_MANAGE_STAFF);

	M_MANAGE_STAFF_MEMBER = notappl;

postproc

	if M_MANAGE_STAFF_MEMBER = 1 then

		// Prefill in the staff member's name
		M_MANAGE_STAFF_NAME = S_STAFF_NAME;
		skip to M_MANAGE_STAFF_NAME;

	elseif M_MANAGE_STAFF_MEMBER = 2 then

		if S_PIN_CODE = notappl then
			errmsg("Staff PIN code of %s is not yet set", capi_manage_staff_name);

		else
			errmsg("Staff PIN code of %s is %v", capi_manage_staff_name, S_PIN_CODE);

		endif;

		reenter;

	elseif M_MANAGE_STAFF_MEMBER = 3 then

		S_PIN_CODE = notappl;
		writecase(PSC_STAFF_DICT);

		errmsg("Staff PIN code of %s has been reset", capi_manage_staff_name);

		if S_STAFF_CODE = M_CURRENT_STAFF_CODE then
			// Supervisor changed their code, log out so that they can log in and reset it
			Logout();

		else
			reenter;

		endif;

	endif;


PROC M_MANAGE_STAFF_NAME

onfocus

	if M_MANAGE_STAFF = "1" then
		M_MANAGE_STAFF_NAME = "";
	endif;

postproc

	if M_MANAGE_STAFF_NAME = "" then
		errmsg("You cannot enter a blank name.");
		reenter;

	elseif M_MANAGE_STAFF = "1" then
		VerifyStaffNameIsUnique(M_MANAGE_STAFF_NAME, "");

		// Add a new interviewer
		clear(PSC_STAFF_DICT);

		S_STAFF_CODE = uuid(); // Create unique identifier for interviewer
		S_STAFF_NAME = M_MANAGE_STAFF_NAME;
		S_SUPERVISOR_STAFF_CODE = M_CURRENT_STAFF_CODE;
		S_TIME_CREATED_ACCOUNT = timestamp();
		setcaselabel(PSC_STAFF_DICT, strip(S_STAFF_NAME));

		writecase(PSC_STAFF_DICT);

		errmsg("%s successfully added as an interviewer", LookupStaffName(S_STAFF_CODE));

		reenter M_MANAGE_STAFF;

	else
		// Modify the name
		string oldName = LookupStaffName(S_STAFF_CODE);

		if M_MANAGE_STAFF_NAME = oldName then
			errmsg("The name is the same as before and has not been changed");

		else
			VerifyStaffNameIsUnique(M_MANAGE_STAFF_NAME, M_MANAGE_STAFF);

			S_STAFF_NAME = M_MANAGE_STAFF_NAME;
			setcaselabel(PSC_STAFF_DICT, strip(S_STAFF_NAME));
			writecase(PSC_STAFF_DICT);

			errmsg("%s successfully renamed to %s", oldName, LookupStaffName(S_STAFF_CODE));

		endif;

		reenter M_MANAGE_STAFF_MEMBER;

	endif;


PROC M_INTERVIEWER_CODE

onfocus

	ValueSet string interviewer_code_vs;

	forcase PSC_STAFF_DICT where M_CURRENT_STAFF_CODE <> S_STAFF_CODE do
		// Not supervisor
		interviewer_code_vs.add(S_STAFF_NAME, key(PSC_STAFF_DICT));
	endfor;

	if interviewer_code_vs.length() = 0 then
		errmsg("You must add interviewers before you can make any assignments");
		reenter M_SUPERVISOR_MENU;
	endif;

	setvalueset(M_INTERVIEWER_CODE, interviewer_code_vs);

	M_INTERVIEWER_CODE = "";

postproc

	loadcase(PSC_STAFF_DICT, M_INTERVIEWER_CODE);

	capi_manage_staff_name = LookupStaffName(M_INTERVIEWER_CODE);

	// Check if the interviewer already has an assignment
	numeric numberAssignmentsForInterviewer = countcases(PSC_ASSIGNMENTS_DICT
		where A_STAFF_CODE = M_INTERVIEWER_CODE and A_ROLE = 1);

	if numberAssignmentsForInterviewer > 0 then
		errmsg("%s already has %d assignment. Are you sure you want to add another?",
			LookupStaffName(M_INTERVIEWER_CODE), numberAssignmentsForInterviewer)
			select("Yes", continue, "No", M_INTERVIEWER_CODE);
	endif;


PROC M_INTERVIEWER_EA

onfocus

	ValueSet interviewer_ea_vs;

	// Display all enumerations areas that are within the current province and district
	forcase PSC_GEOCODES_DICT where G_AREA_LEVEL = 3 and
		G_PROVINCE = M_CURRENT_PROVINCE and G_DISTRICT = M_CURRENT_DISTRICT do

		string eaAssignedNames;

		forcase PSC_ASSIGNMENTS_DICT(startswith, maketext("%v%v%v", G_PROVINCE, G_DISTRICT
			, G_EA)) do

				if A_ROLE = 1 then
					// Only interviewers
					if length(eaAssignedNames) > 0 then
						// Use a comma to separate multiple names
						eaAssignedNames = eaAssignedNames + ", ";
					endif;

					eaAssignedNames = eaAssignedNames + LookupStaffName(A_STAFF_CODE);

				endif;
		
		enddo;

		if length(eaAssignedNames) > 0 then
			eaAssignedNames = " (" + eaAssignedNames + ")";
		endif;

		// Display EA codes
		interviewer_ea_vs.add(LookupEAName(G_EA) + eaAssignedNames, G_EA);

	endfor;

	setvalueset(M_INTERVIEWER_EA, interviewer_ea_vs);

	// Clear EA assignment
	M_INTERVIEWER_EA = notappl;

postproc

	numeric numberExistingAssignments = 0;

	forcase PSC_ASSIGNMENTS_DICT where
		A_PROVINCE = M_CURRENT_PROVINCE and
		A_DISTRICT = M_CURRENT_DISTRICT and
		A_EA = M_INTERVIEWER_EA and
		A_ROLE = 1 do

		inc(numberExistingAssignments);

		if A_STAFF_CODE = M_INTERVIEWER_CODE then
			errmsg("%s has already been assigned to %s", LookupEAName(M_INTERVIEWER_EA), LookupStaffName(M_INTERVIEWER_CODE));
			reenter;
		endif;

	endfor;

	if numberExistingAssignments >= 1 then
		errmsg("Are you sure you want to assign %s to more than one interviewer?", LookupEAName(M_INTERVIEWER_EA))
		select("Yes", continue, "No", M_INTERVIEWER_EA);
	endif;

	errmsg("Are you sure you want to assign %s to %s?", LookupEAName(M_INTERVIEWER_EA), LookupStaffName(M_INTERVIEWER_CODE))
	select("Yes", continue, "No", M_INTERVIEWER_EA);

	clear(PSC_ASSIGNMENTS_DICT);

	A_PROVINCE = M_CURRENT_PROVINCE;
	A_DISTRICT = M_CURRENT_DISTRICT;
	A_EA = M_INTERVIEWER_EA;
	A_STAFF_CODE = M_INTERVIEWER_CODE;
	A_ROLE = 1;
	A_SEGMENT = segment_alphabet[( numberExistingAssignments + 1 ):1];

	A_DATE_ASSIGNED = timestamp();

	writecase(PSC_ASSIGNMENTS_DICT);

	errmsg("%s successfully assigned to %s", LookupEAName(A_EA), LookupStaffName(M_INTERVIEWER_CODE));

	reenter M_SUPERVISOR_MENU;
