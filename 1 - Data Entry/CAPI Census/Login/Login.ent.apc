{ Application 'Login' logic file generated by CSPro }
PROC GLOBAL


// ------------------
// ------------------ Global variables
// ------------------


numeric supervisor_password = 1234;
string login_interview_setting_key = "PSC Interview Login";
string login_supervisor_setting_key = "PSC Supervisor Login";
string assignment_setting_key = "SVC Assignment";
List string months = "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec";


// ------------------
// ------------------ CAPI text variables
// ------------------

string capi_publish_date;
string capi_staff_name;	// Name of the person who logged into the system
string capi_staff_role;
string capi_province_name;


// ------------------
// ------------------ Miscellaneous functions
// ------------------


// Check that no person, other than someone with code ignoreStaffCode, has the name in staffName
function VerifyStaffNameIsUnique(string staffName, string ignoreStaffCode)

	numeric nameIsUsed = countcases(PSC_STAFF_DICT where S_STAFF_CODE <> ignoreStaffCode and S_STAFF_NAME = staffName);

	if ignoreStaffCode <> "" then
		// Load the staff entry that was in memory
		loadcase(PSC_STAFF_DICT, ignoreStaffCode);
	endif;

	if nameIsUsed then
		errmsg("The name %s is used by another staff member", strip(staffName));
		reenter;
	endif;

end;


function ValidatePINCode(code)

	if code < 1000 then
		errmsg("The PIN code must be four digits and cannot start with 0");
		reenter;
	endif;

	if( errmsg("Confirm that %04d is the correct code", code)
		select("Correct", continue,"Incorrect", continue) ) = 2 then
		reenter;
	endif;

end;


// ------------------
// ------------------ Program code
// ------------------


PROC LOGIN_FF

PROC L_LOGIN

onfocus

	// Clear the login
	L_LOGIN = "";
	L_PIN_CODE_CONFIRMATION = notappl;
	
	ValueSet string login_vs;

	forcase PSC_STAFF_DICT do
		login_vs.add(S_STAFF_NAME, key(PSC_STAFF_DICT));
	endfor;

	login_vs.add("Update programs from headquarters", "1");
	login_vs.add("Update programs from supervisor", "2");
	login_vs.add("Begin work as a supervisor", "3");

	setvalueset(L_LOGIN, login_vs);

	// Useful to see if the current application is being used
	numeric publishYYYYMMDD = int(publishdate() / 1000000);
	numeric publishDD = publishYYYYMMDD % 100; // % = remainder (extract the last two digits)
	numeric publishMM = int(publishYYYYMMDD / 100) % 100;
	numeric publishYYYY = int(publishYYYYMMDD / 10000);
	capi_publish_date = maketext("%d %s %d", publishDD, months(publishMM), publishYYYY);

postproc

	if L_LOGIN = "1" then
		// todo
		// SyncWithHQ(app_sync);
		reenter;

	elseif L_LOGIN = "2" then
		// todo
		// StartServer();
		reenter;

	elseif L_LOGIN = "3" then
		skip to SUPERVISOR_CREATION_FORM;

	elseif loadcase(PSC_STAFF_DICT, L_LOGIN) then
		capi_staff_name = LookupStaffName(L_LOGIN);

	endif;


PROC L_PIN_CODE_CONFIRMATION

preproc

	setproperty(L_PIN_CODE_CONFIRMATION, "Protected", "No");

postproc

	if S_PIN_CODE = notappl then
		// Creating a new PIN code
		ValidatePINCode(L_PIN_CODE_CONFIRMATION);

		S_PIN_CODE = L_PIN_CODE_CONFIRMATION;
		S_DEVICE_ID = getdeviceid();
		writecase(PSC_STAFF_DICT);

	elseif L_PIN_CODE_CONFIRMATION <> S_PIN_CODE then
		// Validating an existing PIN code
		errmsg("Invalid PIN code");
		reenter;

	endif;

	// todo
	//savesetting(login_setting_key, S_STAFF_CODE);

	setproperty(L_PIN_CODE_CONFIRMATION, "Protected", "Yes");

	skip to ASSIGNMENT_SELECTION_FORM;
PROC L_SUPERVISOR_ACCESS_PASSWORD

preproc

	// Clear the values in case multiple supervisors setup accounts
	L_SUPERVISOR_ACCESS_PASSWORD = notappl;
	L_SUPERVISOR_NAME = "";
	L_SUPERVISOR_PIN_CODE = notappl;

postproc

	if L_SUPERVISOR_ACCESS_PASSWORD <> supervisor_password then
		errmsg("Invalid password. You cannot proceed as a supervisor.");
		reenter;
	endif;
	
	
	
PROC L_SUPERVISOR_NAME

	if L_SUPERVISOR_NAME = "" then
		errmsg("You cannot enter a blank name.");
		reenter;
	endif;

	VerifyStaffNameIsUnique(L_SUPERVISOR_NAME, "");


PROC L_SUPERVISOR_PIN_CODE

postproc

	ValidatePINCode(L_SUPERVISOR_PIN_CODE);

	// Update the staff file (save the data about this supervisor)
	clear(PSC_STAFF_DICT);
	S_STAFF_CODE = uuid(); // Create unique identifier for supervisor
	S_STAFF_NAME = L_SUPERVISOR_NAME;
	S_PIN_CODE = L_SUPERVISOR_PIN_CODE;;
	S_DEVICE_ID = getdeviceid();
	S_SUPERVISOR_STAFF_CODE = "";
	S_TIME_CREATED_ACCOUNT = timestamp();
	setcaselabel(PSC_STAFF_DICT, strip(S_STAFF_NAME));

	writecase(PSC_STAFF_DICT);

	// Set the login to the supervisor
	L_LOGIN = S_STAFF_CODE;
	// todo
	//savesetting(login_setting_key, L_LOGIN);

	capi_staff_name = LookupStaffName(L_LOGIN);
PROC L_ASSIGNMENT_SELECTION

onfocus

	numeric numberInterviewerAssignments = 0;

	ValueSet string assignments_vs;

	forcase PSC_ASSIGNMENTS_DICT where A_STAFF_CODE = L_LOGIN do

		string label = maketext("%s (%v) / %s (%v)",
			LookupProvinceName(A_PROVINCE), A_PROVINCE,
			LookupDistrictName(A_PROVINCE, A_DISTRICT), A_DISTRICT);

		if A_ROLE = 2 then
			label = maketext("Supervise: %s", label);

		else
			label = maketext("Interview: %s / %s", label, LookupEAName(A_EA));

		endif;

		assignments_vs.add(label, key(PSC_ASSIGNMENTS_DICT));

		if A_ROLE = 1 then
			inc(numberInterviewerAssignments);
		endif;

	endfor;

	if S_SUPERVISOR_STAFF_CODE = "" then
		assignments_vs.add("Select census area to supervise", "1");
		capi_staff_role = "Supervisor";

		assignments_vs.add("Update programs from headquarters", "2");

	else
		capi_staff_role = "Interviewer";

		if numberInterviewerAssignments = 0 then
			errmsg("Your supervisor has not yet assigned you any EAs. Transfer data with the supervisor once they have made an assignment");
		endif;

		assignments_vs.add("Update programs from supervisor", "3");

	endif;

	assignments_vs.add("Switch users", "4");

	setvalueset(L_ASSIGNMENT_SELECTION, assignments_vs);

	L_ASSIGNMENT_SELECTION = "";

postproc

	if L_ASSIGNMENT_SELECTION = "1" then

		// Select census area to supervise
		if countcases(PSC_GEOCODES_DICT) = 0 then
			errmsg("You do not have a valid list of geocodes. Transfer data with headquarters to get this list.");
			reenter;
		endif;

		skip to L_SUPERVISOR_PROVINCE;

	elseif L_ASSIGNMENT_SELECTION = "2" then
		//todo
		//SyncWithHQ(app_sync);
		reenter;

	elseif L_ASSIGNMENT_SELECTION = "3" then
		//todo
		//StartServer();
		reenter;

	elseif L_ASSIGNMENT_SELECTION = "4" then
		//todo
		//SwitchUsers();

	elseif loadcase(PSC_ASSIGNMENTS_DICT, L_ASSIGNMENT_SELECTION) then

		// Save the assignment for the next time the menu application is loaded
		if A_ROLE = 1 then
			savesetting(login_interview_setting_key, S_STAFF_CODE);
			savesetting(login_supervisor_setting_key, "");

		else
			savesetting(login_interview_setting_key, "");
			savesetting(login_supervisor_setting_key, S_STAFF_CODE);

		endif;
		
		savesetting(assignment_setting_key, L_ASSIGNMENT_SELECTION);
		skip to LOGIN_COMPLETE_FORM;

	endif;


PROC L_SUPERVISOR_PROVINCE

preproc

	ValueSet province_vs;

	forcase PSC_GEOCODES_DICT where G_AREA_LEVEL = 1 do
		// Prepare value sets for provinces
		province_vs.add(G_AREA_NAME, G_PROVINCE);
	endfor;

	setvalueset(L_SUPERVISOR_PROVINCE, province_vs);

	L_SUPERVISOR_PROVINCE = notappl;
PROC L_SUPERVISOR_DISTRICT

preproc

	capi_province_name = LookupProvinceName(L_SUPERVISOR_PROVINCE);

	ValueSet district_vs;

	forcase PSC_GEOCODES_DICT where G_AREA_LEVEL = 2 and G_PROVINCE = L_SUPERVISOR_PROVINCE do
		// Prepare value sets for districts that are within the previously selected province
		district_vs.add(G_AREA_NAME, G_DISTRICT);
	endfor;

	setvalueset(L_SUPERVISOR_DISTRICT, district_vs);

	L_SUPERVISOR_DISTRICT = notappl;

postproc

	if countcases(PSC_ASSIGNMENTS_DICT where
		A_PROVINCE = L_SUPERVISOR_PROVINCE and
		A_DISTRICT = L_SUPERVISOR_DISTRICT and
		A_STAFF_CODE = L_LOGIN and
		A_ROLE = 2) <> 0 then

		errmsg("You are already assigned to this district.");
		reenter;

	endif;

	// Update the assignments file
	clear(PSC_ASSIGNMENTS_DICT);

	A_PROVINCE = L_SUPERVISOR_PROVINCE;
	A_DISTRICT = L_SUPERVISOR_DISTRICT;
	A_STAFF_CODE = L_LOGIN;
	A_ROLE = 2;
	A_DATE_ASSIGNED = timestamp();

	writecase(PSC_ASSIGNMENTS_DICT);

	// Show the newly saved assignment along with any other assignments the user might have
	reenter L_ASSIGNMENT_SELECTION;


PROC L_LOGIN_COMPLETE

preproc
	
	// todo
	//LaunchMenuApp();
